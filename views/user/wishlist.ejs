<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Wishlist</title>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <link rel="stylesheet" type="text/css" href="/css/user/header.css" />   
    <link rel="stylesheet" type="text/css" href="/css/user/wishlist.css" />   
    <link rel="stylesheet" type="text/css" href="/css/user/footer.css" />   

</head>
<body>

    <%- include('./partials/header.ejs') %>

    <div class="wishlist-container">
        <h2>My Wishlist</h2>
        <div id="wishlistItems">
            <!-- Wishlist Items will be dynamically injected here -->
        </div>
    </div>
    <%- include('./partials/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script>
        document.addEventListener("DOMContentLoaded", async () => {
            await loadWishlist();
        });
    
        // Function to fetch updated cart and wishlist counts (for the header)
        async function updateCounts() {
        try {
            const response = await fetch('/api/user/counts', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();
            console.log('cart data is ',data);
            
            document.getElementById('cartCount').textContent = data.cartCount || 0;
            document.getElementById('wishlistCount').textContent = data.wishlistCount || 0;
        } catch (error) {
            console.error('Error updating counts:', error);
        }
    }
    
        async function loadWishlist() {
            try {
                const response = await fetch("/wishlist/data");
                if (!response.ok) throw new Error("Failed to fetch wishlist");
                const wishlist = await response.json();
                const wishlistItemsContainer = document.getElementById("wishlistItems");
                wishlistItemsContainer.innerHTML = ""; // Clear existing content
    
                if (!wishlist.products.length) {
                    wishlistItemsContainer.innerHTML = `<p class="empty-wishlist">Your wishlist is empty.</p>`;
                    return;
                }
    
                wishlist.products.forEach(product => {
                    const productHTML = `
                        <div class="wishlist-item">
                            <a href="/products/product-detail/${product._id}">
                                <img src="/uploads/${product.images[0]}" alt="${product.name}" class="wishlist-image">
                            </a>
                            <div class="item-details">
                                <p><strong>${product.name}</strong></p>
                                <p>Price: â‚¹${product.price}</p>
                            </div>
                            <div class="action-buttons">
                                <button class="add-to-cart-btn" onclick="moveToCart('${product._id}')">Add to Cart</button>
                                <button class="remove-wishlist-btn" onclick="removeFromWishlist('${product._id}')">Remove</button>
                            </div>
                        </div>
                    `;
                    wishlistItemsContainer.innerHTML += productHTML;
                });
            } catch (error) {
                console.error("Error loading wishlist:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error!",
                    text: "Failed to load wishlist. Please try again.",
                    confirmButtonText: "OK",
                    confirmButtonColor: "#060318",
                    showCancelButton: true,
                    cancelButtonText: "Cancel",
                    cancelButtonColor: "#565564",
                    customClass: {
                        popup: 'swal-custom-popup',
                        title: 'swal-custom-title',
                        htmlContainer: 'swal-custom-text',
                        icon: 'swal-custom-icon',
                        confirmButton: 'swal-custom-button',
                        cancelButton: 'swal-custom-cancel-button'
                    }
                });
            }
        }
    
        async function moveToCart(productId) {
            try {
                const response = await fetch(`/wishlist/move-to-cart/${productId}`, { method: "PATCH" });
                const result = await response.json();
    
                if (!result.success) throw new Error(result.error || "Failed to move item to cart");
    
                Swal.fire({
                    icon: "success",
                    title: "Moved to Cart",
                    text: "Product has been added to your cart!",
                    showConfirmButton: false,
                    timer: 2000,
                    customClass: {
                        popup: 'swal-custom-popup',
                        title: 'swal-custom-title',
                        htmlContainer: 'swal-custom-text',
                        icon: 'swal-custom-icon'
                    }
                });
    
                await loadWishlist(); // Reload wishlist after moving item
                await updateCounts() // Update header counts
            } catch (error) {
                console.error("Error moving item to cart:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error!",
                    text: error.message || "Failed to move item to cart.",
                    confirmButtonText: "OK",
                    confirmButtonColor: "#060318",
                    showCancelButton: true,
                    cancelButtonText: "Cancel",
                    cancelButtonColor: "#565564",
                    customClass: {
                        popup: 'swal-custom-popup',
                        title: 'swal-custom-title',
                        htmlContainer: 'swal-custom-text',
                        icon: 'swal-custom-icon',
                        confirmButton: 'swal-custom-button',
                        cancelButton: 'swal-custom-cancel-button'
                    }
                });
            }
        }
    
        async function removeFromWishlist(productId) {
            try {
                const response = await fetch(`/wishlist/remove/${productId}`, { method: "DELETE" });
                const result = await response.json();
    
                if (!result.success) throw new Error(result.error || "Failed to remove item");
    
                Swal.fire({
                    icon: "success",
                    title: "Removed from Wishlist",
                    text: "Product has been removed from your wishlist!",
                    showConfirmButton: false,
                    timer: 2000,
                    customClass: {
                        popup: 'swal-custom-popup',
                        title: 'swal-custom-title',
                        htmlContainer: 'swal-custom-text',
                        icon: 'swal-custom-icon'
                    }
                });
    
                await loadWishlist(); // Reload wishlist after removal
                await updateCounts(); // Update header counts
            } catch (error) {
                console.error("Error removing item:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error!",
                    text: error.message || "Failed to remove item from wishlist.",
                    confirmButtonText: "OK",
                    confirmButtonColor: "#060318",
                    showCancelButton: true,
                    cancelButtonText: "Cancel",
                    cancelButtonColor: "#565564",
                    customClass: {
                        popup: 'swal-custom-popup',
                        title: 'swal-custom-title',
                        htmlContainer: 'swal-custom-text',
                        icon: 'swal-custom-icon',
                        confirmButton: 'swal-custom-button',
                        cancelButton: 'swal-custom-cancel-button'
                    }
                });
            }
        }
    </script>

    

</body>
</html>
