<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout | Bitwise</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    
    <!-- Custom CSS -->
    
    <link rel="stylesheet" type="text/css" href="/css/user/header.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/checkout.css">
    <link rel="stylesheet" type="text/css" href="/css/user/footer.css">


    
</head>
<body>
    <%- include('./partials/header.ejs') %>

    <div class="checkout-container">
        <h2>Checkout</h2>
        <div class="checkout-grid">
            <!-- Left Side: Address, Order Summary, Coupon, Payment -->
            <div class="checkout-details">
                <!-- Address Section -->
                <div class="address-section">
                    <h3>Select Address</h3>
                    <div id="addresses">
                        <% addresses.forEach(address => { %>
                            <div class="address-item <%= address.isDefault ? 'default-address' : '' %>">
                                <p><strong><%= address.firstName %> <%= address.lastName %></strong></p>
                                <p><%= address.street %>, <%= address.city %>, <%= address.state %> - <%= address.postalCode %>, <%= address.country %></p>
                                <p>Phone: <%= address.phoneNumber %></p>
                                <button class="edit-address-btn" onclick="editAddress('<%= address._id %>')">Edit</button>
                                <input type="radio" name="selectedAddress" value="<%= address._id %>" <%= address.isDefault ? 'checked' : '' %>>
                            </div>
                        <% }); %>
                    </div>
                    <button class="add-address-btn" onclick="openAddressModal('add')">Add New Address</button>
                </div>

                <!-- Product Summary -->
                <div class="summary-section">
                    <h3>Order Summary</h3>
                    <div id="checkoutProducts">
                        <% checkoutProducts.forEach(product => { %>
                            <div class="checkout-item">
                                <img src="/uploads/<%= product.image %>" alt="<%= product.name %>" class="checkout-image">
                                <div class="item-details">
                                    <p><strong><%= product.name %></strong></p>
                                    <p>Price: ₹<%= product.price.toFixed(2) %> x <%= product.quantity %></p>
                                    <% if (product.stock < product.quantity) { %>
                                        <p style="color: #dc3545; font-weight: bold;">Stock Unavailable (Available: <%= product.stock %>)</p>
                                    <% } %>
                                    <% if (product.offerDiscount > 0) { %>
                                        <p>Offer Discount: ₹<%= product.offerDiscount.toFixed(2) %></p>
                                        <p><strong>Total: ₹<%= product.productTotal.toFixed(2) %></strong></p>
                                    <% } else { %>
                                        <p><strong>Total: ₹<%= (product.price * product.quantity).toFixed(2) %></strong></p>
                                    <% } %>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>

                <!-- Coupon Section -->
<div class="coupon-section">
    <input type="text" id="couponCode" class="coupon-input" placeholder="Enter Coupon Code" <%= appliedCoupon ? 'disabled' : '' %> value="<%= appliedCoupon || '' %>">
    <% if (appliedCoupon) { %>
        <button class="remove-coupon-btn" onclick="removeCoupon()">Remove Coupon</button>
    <% } else { %>
        <button class="apply-coupon-btn" onclick="applyCoupon()">Apply Coupon</button>
        <button class="view-coupons-btn" onclick="openCouponModal()">View Coupons</button>
    <% } %>
</div>

<!-- Coupon Modal -->
<div id="couponModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeCouponModal()">×</span>
        <h2>Available Coupons</h2>
        <div class="coupon-list">
            <% if (globalCoupons?.length === 0 && userCoupons?.length === 0) { %>
                <p class="no-coupons">No coupons available.</p>
            <% } else { %>
                <!-- Global Coupons -->
                <% if (globalCoupons?.length > 0) { %>
                    <h3>Global Coupons</h3>
                    <% globalCoupons.forEach(coupon => { %>
                        <div class="coupon-item">
                            <div class="coupon-details">
                                <p><strong>Code:</strong> <%= coupon.code %></p>
                                <p><strong>Discount:</strong> <%= coupon.discount %>%</p>
                                <p><strong>Minimum Spend:</strong> ₹<%= coupon.minimumSpend.toFixed(2) %></p>
                            
                            </div>
                            <div class="coupon-actions">
                                <button class="copy-coupon-btn" onclick="copyCouponCode('<%= coupon.code %>')">Copy</button>
                                <button class="apply-coupon-btn" onclick="applyCouponFromModal('<%= coupon.code %>')">Apply</button>
                            </div>
                        </div>
                    <% }) %>
                <% } %>

                <!-- User-Specific Coupons -->
                <% if (userCoupons?.length > 0) { %>
                    <h3>Your Coupons</h3>
                    <% userCoupons.forEach(coupon => { %>
                        <div class="coupon-item">
                            <div class="coupon-details">
                                <p><strong>Code:</strong> <%= coupon.code %></p>
                                <p><strong>Discount:</strong> <%= coupon.discount %></p>
                                <p><strong>Minimum Spend:</strong> ₹<%= coupon.minimumSpend.toFixed(2) %></p>
                            </div>
                            <div class="coupon-actions">
                                <button class="copy-coupon-btn" onclick="copyCouponCode('<%= coupon.code %>')">Copy</button>
                                <button class="apply-coupon-btn" onclick="applyCouponFromModal('<%= coupon.code %>')">Apply</button>
                            </div>
                        </div>
                    <% }) %>
                <% } %>
            <% } %>
        </div>
    </div>
</div>

                <!-- Payment Section -->
                <div class="payment-section">
                    <h3>Payment Method</h3>
                    <% if (wallet) { %>
                        <label>
                            <input type="radio" name="paymentMethod" value="Wallet" <%= finalTotal <= wallet.balance ? '' : 'disabled' %>> Wallet Payment
                        </label>
                        <% if (finalTotal < wallet.balance) { %>
                            <p style="color: #125e24; font-size: 0.9rem; margin-top: 5px;"><%= wallet.balance.toFixed(2) %></p>
                        <% } %>
                        <% if (finalTotal > wallet.balance) { %>
                            <p style="color: #dc3545; font-size: 0.9rem; margin-top: 5px;">Insufficient wallet balance ( <%= wallet.balance %> )</p>
                        <% } %>
                    <% } %>
                    <label>
                        <input type="radio" name="paymentMethod" value="Cash on Delivery" <%= finalTotal <= 1000 ? '' : 'disabled' %>> Cash on Delivery
                    </label>
                    <% if (finalTotal > 1000) { %>
                        <p style="color: #dc3545; font-size: 0.9rem; margin-top: 5px;">COD only available for orders below ₹1000</p>
                    <% } %>
                    <label>
                        <input type="radio" name="paymentMethod" value="Razorpay"> Online Payment
                    </label>
                </div>
            </div>

            <!-- Right Side: Price Breakdown -->
            <div class="price-breakdown">
                <h3>Price Breakdown</h3>
                <p>Subtotal: <span id="subtotal">₹<%= subtotal.toFixed(2) %></span></p>
                <p>Offer Discount: <span id="offerDiscount">₹<%= totalDiscount.toFixed(2) %></span></p>
                <p>Coupon Discount: <span id="couponDiscount">₹<%= couponDiscount.toFixed(2) %></span></p>
                <p>Shipping: <span id="shipping">₹<%= shippingCharge.toFixed(2) %></span></p>
                <p class="total">Grand Total: <span id="total">₹<%= finalTotal.toFixed(2) %></span></p>
                <button class="place-order-btn" <%= isStockAvailable ? '' : '' %> onclick="placeOrder()">Place Order</button>
            </div>
        </div>
    </div>

    <!-- Address Modal -->
    <div id="addressModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddressModal()">×</span>
            <h2 id="modalTitle">Add New Address</h2>
            <form id="addressForm">
                <input type="hidden" id="addressId" name="addressId">
                <div class="form-group">
                    <label for="firstName">First Name:</label>
                    <input type="text" id="firstName" name="firstName" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name:</label>
                    <input type="text" id="lastName" name="lastName">
                </div>
                <div class="form-group">
                    <label for="phoneNumber">Phone Number:</label>
                    <input type="text" id="phoneNumber" name="phoneNumber" required>
                </div>
                <div class="form-group">
                    <label for="street">Street:</label>
                    <input type="text" id="street" name="street" required>
                </div>
                <div class="form-group">
                    <label for="city">City:</label>
                    <input type="text" id="city" name="city" required>
                </div>
                <div class="form-group">
                    <label for="state">State:</label>
                    <input type="text" id="state" name="state" required>
                </div>
                <div class="form-group">
                    <label for="postalCode">Postal Code:</label>
                    <input type="text" id="postalCode" name="postalCode" required>
                </div>
                <div class="form-group">
                    <label for="country">Country:</label>
                    <input type="text" id="country" name="country" required>
                </div>
                <div class="form-group">
                    <label for="additionalInfo">Additional Info:</label>
                    <textarea id="additionalInfo" name="additionalInfo"></textarea>
                </div>
                <div class="form-group">
                    <label><input type="checkbox" id="isDefault" name="isDefault"> Set as Default</label>
                </div>
                <button type="submit" class="save-address-btn">Save Address</button>
            </form>
        </div>
    </div>
<%- include('./partials/footer') %>


    <!-- Bootstrap JS and Dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script>

function openCouponModal() {
    const modal = document.getElementById("couponModal");
    modal.style.display = "block";
}

function closeCouponModal() {
    const modal = document.getElementById("couponModal");
    modal.style.display = "none";
}

function copyCouponCode(code) {
    navigator.clipboard.writeText(code).then(() => {
        Swal.fire({
            icon: "success",
            title: "Copied!",
            text: `Coupon code ${code} copied to clipboard.`,
            showConfirmButton: false,
            timer: 1500,
            customClass: {
                popup: 'swal-custom-popup',
                title: 'swal-custom-title',
                htmlContainer: 'swal-custom-text',
                icon: 'swal-custom-icon'
            }
        });
    }).catch(err => {
        console.error("Error copying coupon code:", err);
        Swal.fire({
            icon: "error",
            title: "Error!",
            text: "Failed to copy coupon code.",
            confirmButtonText: "OK",
            confirmButtonColor: "#060318",
            showCancelButton: true,
            cancelButtonText: "Cancel",
            cancelButtonColor: "#565564",
            customClass: {
                popup: 'swal-custom-popup',
                title: 'swal-custom-title',
                htmlContainer: 'swal-custom-text',
                icon: 'swal-custom-icon',
                confirmButton: 'swal-custom-button',
                cancelButton: 'swal-custom-cancel-button'
            }
        });
    });
}

function applyCouponFromModal(code) {
    const couponInput = document.getElementById("couponCode");
    couponInput.value = code;
    closeCouponModal();
    applyCoupon();
}

        document.addEventListener("DOMContentLoaded", async () => {
            await loadAddresses();
        });

        async function loadAddresses() {
            const response = await fetch("/checkout/addresses");
            const result = await response.json();
            const addresses = result.addresses;
            const addressContainer = document.getElementById("addresses");
            addressContainer.innerHTML = "";

            addresses.forEach(address => {
                const addressHTML = `
                    <div class="address-item ${address.isDefault ? 'default-address' : ''}">
                        <p><strong>${address.firstName} ${address.lastName}</strong></p>
                        <p>${address.street}, ${address.city}, ${address.state} - ${address.postalCode}, ${address.country}</p>
                        <p>Phone: ${address.phoneNumber}</p>
                        <button class="edit-address-btn" onclick="editAddress('${address._id}')">Edit</button>
                        <input type="radio" name="selectedAddress" value="${address._id}" ${address.isDefault ? 'checked' : ''}>
                    </div>
                `;
                addressContainer.innerHTML += addressHTML;
            });
        }

        function openAddressModal(mode = 'add', address = null) {
            const modal = document.getElementById("addressModal");
            const form = document.getElementById("addressForm");
            const title = document.getElementById("modalTitle");

            modal.style.display = "block";
            title.innerText = mode === 'add' ? "Add New Address" : "Edit Address";

            if (mode === 'edit' && address) {
                document.getElementById("addressId").value = address._id;
                document.getElementById("firstName").value = address.firstName;
                document.getElementById("lastName").value = address.lastName || '';
                document.getElementById("phoneNumber").value = address.phoneNumber;
                document.getElementById("street").value = address.street;
                document.getElementById("city").value = address.city;
                document.getElementById("state").value = address.state;
                document.getElementById("postalCode").value = address.postalCode;
                document.getElementById("country").value = address.country;
                document.getElementById("additionalInfo").value = address.additionalInfo || '';
                document.getElementById("isDefault").checked = address.isDefault;
            } else {
                form.reset();
                document.getElementById("addressId").value = '';
            }
        }

        function closeAddressModal() {
            document.getElementById("addressModal").style.display = "none";
        }

        async function editAddress(addressId) {
            const response = await fetch(`/checkout/address/${addressId}`);
            const result = await response.json();
            const address = result.address;
            openAddressModal('edit', address);
        }

        document.getElementById("addressForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const addressData = Object.fromEntries(formData);

            addressData.isDefault = addressData.isDefault === "on" ? true : false;

            const method = addressData.addressId ? 'PUT' : 'POST';
            const url = addressData.addressId ? `/checkout/address/${addressData.addressId}` : '/checkout/add-address';

            try {
                const response = await fetch(url, {
                    method: method,
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(addressData)
                });

                const result = await response.json();
                if (result.success) {
                    closeAddressModal();
                    await loadAddresses();
                } else {
                    alert(result.message || "Failed to save address");
                }
            } catch (error) {
                console.error("Error saving address:", error);
                alert("An error occurred while saving the address");
            }
        });

        async function applyCoupon() {
            const couponCode = document.getElementById("couponCode").value.trim();
            if (!couponCode) {
                Swal.fire({ icon: "warning", title: "Empty Coupon", text: "Please enter a coupon code!" });
                return;
            }

            try {
                const response = await fetch('/checkout/apply-coupon', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ couponCode })
                });

                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Coupon Applied",
                        text: result.message,
                        showConfirmButton: false,
                        timer: 1500
                    });

                    document.getElementById("subtotal").innerText = `₹${result.subtotal.toFixed(2)}`;
                    document.getElementById("offerDiscount").innerText = `₹${result.totalDiscount.toFixed(2)}`;
                    document.getElementById("couponDiscount").innerText = `₹${result.couponDiscount.toFixed(2)}`;
                    document.getElementById("shipping").innerText = `₹${result.shippingCharge.toFixed(2)}`;
                    document.getElementById("total").innerText = `₹${result.finalTotal.toFixed(2)}`;
                    document.getElementById("couponCode").disabled = true;

                    const couponSection = document.querySelector('.coupon-section');
                    couponSection.innerHTML = `
                        <input type="text" id="couponCode" class="coupon-input" placeholder="Enter Coupon Code" disabled value="${result.appliedCoupon}">
                        <button class="remove-coupon-btn" onclick="removeCoupon()">Remove Coupon</button>
                    `;
                } else {
                    Swal.fire({ icon: "error", title: "Error", text: result.message });
                }
            } catch (error) {
                console.error("Error applying coupon:", error);
                Swal.fire({ icon: "error", title: "Error", text: "Failed to apply coupon" });
            }
        }

        async function removeCoupon() {
            const confirmation = await Swal.fire({
                title: 'Confirm Removal',
                text: 'Are you sure you want to remove this coupon?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#2563eb',
                cancelButtonColor: '#ff3a30',
                confirmButtonText: 'Yes, remove it!'
            });

            if (confirmation.isConfirmed) {
                try {
                    const response = await fetch('/checkout/remove-coupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Coupon Removed",
                            text: result.message,
                            showConfirmButton: false,
                            timer: 1500
                        });

                        document.getElementById("subtotal").innerText = `₹${result.subtotal.toFixed(2)}`;
                        document.getElementById("offerDiscount").innerText = `₹${result.totalDiscount.toFixed(2)}`;
                        document.getElementById("couponDiscount").innerText = `₹${result.couponDiscount.toFixed(2)}`;
                        document.getElementById("shipping").innerText = `₹${result.shippingCharge.toFixed(2)}`;
                        document.getElementById("total").innerText = `₹${result.finalTotal.toFixed(2)}`;
                        document.getElementById("couponCode").disabled = false;

                        const couponSection = document.querySelector('.coupon-section');
                        couponSection.innerHTML = `
                            <input type="text" id="couponCode" class="coupon-input" placeholder="Enter Coupon Code">
                            <button class="apply-coupon-btn" onclick="applyCoupon()">Apply Coupon</button>
                        `;
                    } else {
                        Swal.fire({ icon: "error", title: "Error", text: result.message });
                    }
                } catch (error) {
                    console.error("Error removing coupon:", error);
                    Swal.fire({ icon: "error", title: "Error", text: "Failed to remove coupon" });
                }
            }
        }

        async function placeOrder() {
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
        const couponCode = document.getElementById("couponCode")?.value || null;

        if (!selectedAddress) {
            Swal.fire({
                icon: "error",
                title: "No Address Selected",
                text: "Please select an address!"
            });
            return;
        }

        if (!paymentMethod) {
            Swal.fire({
                icon: "error",
                title: "No Payment Method",
                text: "Please select a payment method!"
            });
            return;
        }

        // Server-side check for stock availability (final validation)
        try {
                const response = await fetch('/cart/validate-stock', {
                    method: 'GET',
                    headers: { "Content-Type": "application/json" }
                });

                const result = await response.json();
                if (!response.ok || !result.success) {
                    Swal.fire({
                        icon: "warning",
                        title: "Out of Stock",
                        text: result.message || "Some products in your cart are out of stock. Please update your cart.",
                    }).then(() => location.reload()); // Reload to reflect updated stock
                    return;
                }

                
            } catch (error) {
                console.error("Error validating stock:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error!",
                    text: "Failed to validate stock. Please try again.",
                });
            }

        const orderData = {
            selectedAddress: selectedAddress.value,
            paymentMethod,
            couponCode
        };

        try {
            // Create the order first
            const placeOrderResponse = await fetch("/checkout/place-order", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(orderData)
            });

            const result = await placeOrderResponse.json();
            console.log('Initial order creation result:', result);

            if (paymentMethod === "Razorpay") {
                // If Razorpay, initiate payment
                await initiateRazorpayPayment(selectedAddress.value, orderData, result.orderId);
            } else {
                // For non-Razorpay methods (e.g., COD, Wallet)
                if (result.success) {
                    window.location.href = `/checkout/order-success?orderId=${result.orderId}`;
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Order Failed!",
                        text: result.message || "Failed to place the order."
                    });
                }
            }
        } catch (error) {
            console.error("Error placing order:", error);
            Swal.fire({
                icon: "error",
                title: "Order Failed!",
                text: error.message || "Failed to place the order."
            });
        }
    }

    async function initiateRazorpayPayment(selectedAddress, orderData, orderId) {
        // Create a Razorpay order
        const orderResponse = await fetch('/checkout/create-razorpay-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ couponCode: orderData.couponCode })
        });
        const razorpayData = await orderResponse.json();

        if (!razorpayData.success) {
            Swal.fire({ icon: "error", title: "Order Creation Failed", text: razorpayData.message });
            return;
        }

        const options = {
            key: razorpayData.key,
            amount: razorpayData.amount,
            currency: razorpayData.currency,
            order_id: razorpayData.razorpayOrderId,
            name: 'Bitwise',
            description: 'Order Payment',
            handler: async function (response) {
                orderData.razorpayOrderId = response.razorpay_order_id;
                orderData.paymentId = response.razorpay_payment_id;
                orderData.razorpaySignature = response.razorpay_signature;
                orderData.orderId = orderId; // Pass the MongoDB _id as existingOrderId

                // Update the order with payment details
                const updateOrderResponse = await fetch('/checkout/place-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify(orderData),
                });
                const result = await updateOrderResponse.json();

                if (result.success) {
                    window.location.href = `/checkout/order-success?orderId=${orderId}`;
                } else {
                    Swal.fire({ icon: "error", title: "Payment Failed", text: result.message });
                    window.location.href = `/checkout/order-failure?orderId=${orderId}`;
                }
            },
            prefill: {
                name: '<%= user?.firstName || "User" %> <%= user?.lastName || "" %>',
                email: '<%= user?.email || "" %>',
                contact: '<%= user?.phone || "" %>'
            },
            theme: { color: '#2563eb' }
        };

        const rzp = new Razorpay(options);
        rzp.on('payment.failed', function (response) {
            Swal.fire({ 
                icon: "error", 
                title: "Payment Failed", 
                text: response.error.description || "Payment failed. Please try again." 
            });
            window.location.href = `/checkout/order-failure?orderId=${orderId}`;
        });
        rzp.open();
    }

    
    </script>
</body>
</html>