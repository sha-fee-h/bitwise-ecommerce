<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shop - Bitwise Laptops</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" type="text/css" href="/css/user/header.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/shop.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/footer.css">


    
</head>
<body>
    <%- include('./partials/header.ejs') %>

    <main>
        <div class="container my-5">
            <!-- Breadcrumb Navigation -->
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Shop</li>
                </ol>
            </nav>

            <div class="row">
                <!-- Sidebar Filters -->
                <div class="col-lg-3 col-md-4 sidebar">
                    <form id="filterForm" action="/products/shop" method="GET">
                        <!-- Search -->
                        <div class="filter-section">
                            <h5>Search products</h5>
                            <input type="text" name="search" class="form-control auto-submit" placeholder="Search products..."
                                value="<%= search %>">
                        </div>

                        <!-- Categories -->
                        <div class="filter-section">
                            <h5>Categories</h5>
                            <% categories.forEach(category => { %>
                                <div class="form-check">
                                    <input class="form-check-input auto-submit" type="checkbox" name="categories"
                                        value="<%= category._id %>" id="category-<%= category._id %>"
                                        <%= selectedCategories.includes(category._id.toString()) ? 'checked' : '' %>>
                                    <label class="form-check-label" for="category-<%= category._id %>">
                                        <%= category.name %>
                                    </label>
                                </div>
                            <% }) %>
                        </div>

                        <!-- Brands -->
                        <div class="filter-section">
                            <h5>Brands</h5>
                            <% brands.forEach(brand => { %>
                                <div class="form-check">
                                    <input class="form-check-input auto-submit" type="checkbox" name="brands"
                                        value="<%= brand %>" id="brand-<%= brand %>"
                                        <%= selectedBrands.includes(brand) ? 'checked' : '' %>>
                                    <label class="form-check-label" for="brand-<%= brand %>">
                                        <%= brand %>
                                    </label>
                                </div>
                            <% }) %>
                        </div>

                        <!-- Price Range -->
                        <div class="filter-section">
                            <h5>Price range</h5>
                            <select name="priceRange" class="form-select auto-submit">
                                <option value="">All prices</option>
                                <option value="0-30000" <%= priceRange === '0-30000' ? 'selected' : '' %>>Below 30000</option>
                                <option value="30000-40000" <%= priceRange === '30000-40000' ? 'selected' : '' %>>30000 to 40000</option>
                                <option value="40000-50000" <%= priceRange === '40000-50000' ? 'selected' : '' %>>40000 to 50000</option>
                                <option value="50000-60000" <%= priceRange === '50000-60000' ? 'selected' : '' %>>50000 to 60000</option>
                                <option value="60000-70000" <%= priceRange === '60000-70000' ? 'selected' : '' %>>60000 to 70000</option>
                                <option value="70000-" <%= priceRange === '70000-' ? 'selected' : '' %>>Above 70000</option>
                            </select>
                        </div>

                        <!-- Sort By -->
                        <div class="filter-section">
                            <h5>Sort by</h5>
                            <select name="sort" class="form-select auto-submit">
                                <option value="">Default</option>
                                <option value="priceLowHigh" <%= sort === "priceLowHigh" ? "selected" : "" %>>Price: Low to High</option>
                                <option value="priceHighLow" <%= sort === "priceHighLow" ? "selected" : "" %>>Price: High to Low</option>
                                <option value="nameAZ" <%= sort === "nameAZ" ? "selected" : "" %>>Name: A-Z</option>
                                <option value="nameZA" <%= sort === "nameZA" ? "selected" : "" %>>Name: Z-A</option>
                                <option value="newArrivals" <%= sort === "newArrivals" ? "selected" : "" %>>New Arrivals</option>
                            </select>
                        </div>

                        <!-- Clear Filters -->
                        <% if (search || selectedCategories.length > 0 || selectedBrands.length > 0 || priceRange || sort) { %>
                            <a href="/products/shop" class="clear-filters">Clear all filters</a>
                        <% } %>

                        <!-- Hidden input for current page -->
                        <input type="hidden" name="page" id="currentPage" value="<%= pagination.currentPage %>">
                    </form>
                </div>

                <!-- Product Grid -->
                <div class="col-lg-9 col-md-8 product-grid">
                    <h2 class="section-title">All products</h2>

                    <div class="row">
                        <% if (products.length > 0) { %>
                            <% products.forEach(product => { %>
                                <div class="col-md-6 col-lg-4 mb-4">
                                    <div class="product-card">
                                        <div class="position-relative">
                                            <img src="<%= product.images.length > 0 ? '/uploads/' + product.images[0] : '/images/default-product.jpg' %>"
                                                class="product-image" alt="<%= product.name %>">
                                        </div>
                                        <div class="product-details">
                                            <h5><%= product.name %></h5>
                                            <div class="price-section">
                                                <% if (product.bestOffer) { %>
                                                    <p class="original-price">₹<%= product.price.toFixed(2) %></p>
                                                    <p class="offer-price">₹<%= (product.price - product.bestOffer.discountAmount).toFixed(2) %></p>
                                                <% } else { %>
                                                    <p class="offer-price">₹<%= product.price.toFixed(2) %></p>
                                                <% } %>
                                            </div>
                                            <p class="category">
                                                Category: <%= product.category ? product.category.name : "Unknown" %>
                                            </p>
                                            <div class="d-grid gap-2">
                                                <a href="/products/product-detail/<%= product._id %>"
                                                    class="btn btn-primary">View details</a>
                                            </div>
                                            <div class="action-buttons">
                                                <button class="btn btn-cart add-to-cart-btn"
                                                    data-product-id="<%= product._id %>"
                                                    data-stock="<%= product.stock %>"
                                                    data-tooltip="Add to cart"
                                                    <%= product.stock > 0 ? '' : 'disabled' %>>
                                                    <i class="fas fa-shopping-cart"></i>
                                                </button>
                                                <button class="btn btn-wishlist add-to-wishlist-btn"
                                                    onclick="addToWishlist('<%= product._id %>')"
                                                    data-tooltip="Add to wishlist">
                                                    <i class="fas fa-heart"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p class="text-center mt-4 text-muted">No products found matching your criteria.</p>
                        <% } %>
                    </div>

                    <!-- Pagination Controls -->
                    <% if (pagination.totalPages > 1) { %>
                        <nav aria-label="Page navigation" class="mt-4">
                            <ul class="pagination justify-content-center">
                                <li class="page-item <%= !pagination.hasPrevious ? 'disabled' : '' %>">
                                    <a class="page-link" href="#" onclick="changePage(<%= pagination.currentPage - 1 %>); return false;">Previous</a>
                                </li>
                                <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                                    <li class="page-item <%= pagination.currentPage === i ? 'active' : '' %>">
                                        <a class="page-link" href="#" onclick="changePage(<%= i %>); return false;"><%= i %></a>
                                    </li>
                                <% } %>
                                <li class="page-item <%= !pagination.hasNext ? 'disabled' : '' %>">
                                    <a class="page-link" href="#" onclick="changePage(<%= pagination.currentPage + 1 %>); return false;">Next</a>
                                </li>
                            </ul>
                        </nav>
                        <p class="text-center text-muted">
                            Showing <%= products.length %> of <%= pagination.totalProducts %> products
                        </p>
                    <% } %>
                </div>
            </div>
        </div>
    </main>

<%- include('./partials/footer') %>


    <script>
        async function updateCounts() {
        try {
            const response = await fetch('/api/user/counts', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();
            console.log('cart data is ',data);
            
            document.getElementById('cartCount').textContent = data.cartCount || 0;
            document.getElementById('wishlistCount').textContent = data.wishlistCount || 0;
        } catch (error) {
            console.error('Error updating counts:', error);
        }
    }
        // Auto-submit the form when filters change
        document.querySelectorAll('.auto-submit').forEach(element => {
            element.addEventListener('change', function() {
                // Reset page to 1 when filters change
                document.getElementById('currentPage').value = 1;
                document.getElementById('filterForm').submit();
            });
        });
    
        // Function to change page
        function changePage(page) {
            document.getElementById('currentPage').value = page;
            document.getElementById('filterForm').submit();
        }
    
        // Check if user is logged in (passed from the server)
        const user = <%- user ? JSON.stringify(user) : 'null' %>;
    
        // Add to cart functionality
        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', async function () {
                // Check if user is logged in
                if (!user) {
            Swal.fire({
                icon: "warning",
                title: "Login Required",
                text: "You need to login first to add items to your cart!",
                showCancelButton: true,
                confirmButtonText: "Login",
                confirmButtonColor: "#060318",
                cancelButtonText: "Cancel",
                cancelButtonColor: "#e74c3c"
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = "/auth/login";
                }
            });
            return;
        }
    
                const productId = this.getAttribute('data-product-id');
                const stock = parseInt(this.getAttribute('data-stock'), 10);
    
                if (stock <= 0) {
            Swal.fire({
                icon: "warning",
                title: "Out of Stock",
                text: "This product is currently unavailable.",
                confirmButtonText: "OK",
                confirmButtonColor: "#060318",
                showCancelButton: true,
                cancelButtonText: "Cancel",
                cancelButtonColor: "#e74c3c"
            });
            return;
        }
    
                try {
                    const response = await fetch("/cart/add", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ productId, quantity: 1 })
                    });
    
                    const result = await response.json();
    
                    if (response.ok && result.success) {
                Swal.fire({
                    icon: "success",
                    title: "Added to Cart",
                    text: "Product has been added to your cart!",
                    showConfirmButton: false,
                    timer: 2000,
                    // Custom styling for consistency
                    customClass: {
                        popup: 'swal-custom-popup',
                        title: 'swal-custom-title',
                        htmlContainer: 'swal-custom-text',
                        icon: 'swal-custom-icon'
                    }
                });
                        await updateCounts()
                    } else {
                        throw new Error(result.error || "Failed to add to cart.");
                    }
                } catch (error) {
                    Swal.fire({
                icon: "error",
                title: "Error!",
                text: error.message || "Something went wrong.",
                confirmButtonText: "OK",
                confirmButtonColor: "#060318",
                showCancelButton: true,
                cancelButtonText: "Cancel",
                cancelButtonColor: "#e74c3c",
                // Custom styling for consistency
                customClass: {
                    popup: 'swal-custom-popup',
                    title: 'swal-custom-title',
                    htmlContainer: 'swal-custom-text',
                    icon: 'swal-custom-icon',
                    confirmButton: 'swal-custom-button',
                    cancelButton: 'swal-custom-cancel-button'
                }
            });
                }
            });
        });
    
        // Add to wishlist functionality
        async function addToWishlist(productId) {
            // Check if user is logged in
            if (!user) {
                Swal.fire({
                    icon: "warning",
                    title: "Login Required",
                    text: "You need to login first to add items to your wishlist!",
                    showCancelButton: true,
                    confirmButtonText: "Login",
                    confirmButtonColor: "#060318",
                    cancelButtonText: "Cancel",
                    cancelButtonColor: "#e74c3c"
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = "/auth/login";
                    }
                });
                return;
            }
    
            try {
                const response = await fetch("/wishlist/add", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ productId })
                });
    
                const result = await response.json();
    
                if (result.success) {
                    Swal.fire({
                    icon: "success",
                    title: "Added to Wishlist",
                    text: "Product has been added to your wishlist!",
                    showConfirmButton: false,
                    timer: 2000,
                    // Custom styling for consistency
                    customClass: {
                        popup: 'swal-custom-popup',
                        title: 'swal-custom-title',
                        htmlContainer: 'swal-custom-text',
                        icon: 'swal-custom-icon'
                    }
                });
                    await updateCounts()
                } else {
                    throw new Error(result.error || "Failed to add to wishlist.");
                }
            } catch (error) {
                Swal.fire({
                icon: "error",
                title: "Error!",
                text: error.message || "Something went wrong.",
                confirmButtonText: "OK",
                confirmButtonColor: "#060318",
                showCancelButton: true,
                cancelButtonText: "Cancel",
                cancelButtonColor: "#e74c3c",
                // Custom styling for consistency
                customClass: {
                    popup: 'swal-custom-popup',
                    title: 'swal-custom-title',
                    htmlContainer: 'swal-custom-text',
                    icon: 'swal-custom-icon',
                    confirmButton: 'swal-custom-button',
                    cancelButton: 'swal-custom-cancel-button'
                }
            });
            }
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>