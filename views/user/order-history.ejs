<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order History</title>
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <link rel="stylesheet" type="text/css" href="/css/user/header.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/order-history.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/footer.css" />
    
    </head>
    <body>
        <%- include('./partials/header.ejs') %>
        
        <main class="container" style="margin: 2rem auto 5rem auto">
            <h2>Order History</h2>
    
            <!-- Filter Form -->
            <form action="/orders/history" method="GET" class="filter-form">
                <label for="startDate">Start Date:</label>
                <input type="date" id="startDate" name="startDate" value="<%= startDate || '' %>" max="<%= new Date().toISOString().split('T')[0] %>" onchange="this.form.submit()">
                
                <label for="endDate">End Date:</label>
                <input type="date" id="endDate" name="endDate" value="<%= endDate || '' %>" max="<%= new Date().toISOString().split('T')[0] %>" onchange="this.form.submit()">
                
                <button type="submit">Apply Filters</button>
            </form>
            
    
            
    
            <!-- Order List -->
            <ul class="order-list" id="orderList">
                <% if (orders && orders.length > 0) { %>
                    <% orders.forEach(order => { %>
                        <li class="order-item" data-order-id="<%= order.orderId %>">
                            <p><strong>Order #:</strong> <%= order.orderId %></p>
                            <p><strong>Order Date:</strong> <%= order.orderDate.toLocaleDateString() %></p>
                            <p><strong>Delivery Status:</strong> <%= order.deliveryStatus %></p>
                            <p><strong>Payment Status:</strong> <%= order.paymentStatus %></p>
                            <p><strong>Total:</strong> Rs. <%= order.total.toFixed(2) %></p>
                            <div class="order-products">
                                <% order.products.forEach(product => { %>
                                    <div class="product-item">
                                        <img src="/uploads/<%= product.productId.images[0] %>" alt="<%= product.productId.name %>">
                                        <span><%= product.productId.name %></span>
                                    </div>
                                <% }); %>
                            </div>
                            <div class="order-actions">
                                <a href="/orders/details/<%= order.orderId %>" class="btn btn-details">View Details</a>
                                <% if (order.deliveryStatus !== 'Cancelled' && order.deliveryStatus !== 'Delivered' && order.deliveryStatus !== 'Returned' && order.deliveryStatus!=='Return Accepted' && order.deliveryStatus !=='Return Rejected' && order.paymentStatus !== 'Failed') { %>
                                    <button class="btn btn-cancel" onclick="cancelOrder('<%= order.orderId %>')">Cancel Order</button>
                                <% } %>
                                <% if (order.deliveryStatus === 'Delivered' && order.deliveyStatus !== 'Returned') { %>
                                    <button class="btn btn-return" onclick="returnOrder('<%= order.orderId %>')">Return Order</button>
                                <% } %>
                                <% if (order.deliveryStatus === 'Delivered') { %>
                                <a href="/orders/invoice/<%= order.orderId %>" class="btn btn-download" target="_blank">Download Invoice</a>
                                <% } %>
                            </div>
                        </li>
                    <% }) %>
                <% } else { %>
                    <p>No orders found.</p>
                <% } %>
            </ul>
    
            <!-- Pagination -->
            <div class="pagination">
                <% if (totalPages > 1) { %>
                    <% if (currentPage > 1) { %>
                        <a href="?page=<%= currentPage - 1 %>&startDate=<%= startDate || '' %>&endDate=<%= endDate || '' %>">Previous</a>
                    <% } %>
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <a href="?page=<%= i %>&startDate=<%= startDate || '' %>&endDate=<%= endDate || '' %>" class="<%= currentPage === i ? 'active' : '' %>"><%= i %></a>
                    <% } %>
                    <% if (currentPage < totalPages) { %>
                        <a href="?page=<%= currentPage + 1 %>&startDate=<%= startDate || '' %>&endDate=<%= endDate || '' %>">Next</a>
                    <% } %>
                <% } %>
            </div>
        </main>
        <%- include('./partials/footer.ejs') %>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
        <script>
            // Search functionality
            function searchOrders() {
                const input = document.getElementById('searchInput').value.toLowerCase();
                const items = document.getElementsByClassName('order-item');
                Array.from(items).forEach(item => {
                    const orderId = item.getAttribute('data-order-id').toLowerCase();
                    item.style.display = orderId.includes(input) ? '' : 'none';
                });
            }
    
            // Cancel order
            async function cancelOrder(orderId) {
                const { value: reason } = await Swal.fire({
                    title: 'Cancel Order',
                    input: 'select',
                    inputLabel: 'Reason for cancellation (optional)',
                    inputPlaceholder: 'Select a reason',
                    showCancelButton: true,
                    confirmButtonText: 'Cancel Order',
        cancelButtonText: 'Close',
        confirmButtonColor: 'black', // Styled button
        cancelButtonColor: '#565564', // Styled button
        background: '#f9fafb', // Light background for contrast
        color: '#1f2937', // Text color
                    inputOptions: {
                        '': 'Select a reason (optional)',
                        'changed_mind': 'Changed my mind',
                        'found_better_price': 'Found a better price elsewhere',
                        'delivery_delay': 'Expected delivery is too late',
                        'wrong_item': 'Ordered the wrong item',
                        'other': 'Other'
                    },
                    inputAttributes: {
            style: 'width: 80%; padding: 10px; font-size: 16px; border: 1px solid #6b7280; border-radius: 6px;'
        },
                });
    
                if (reason !== undefined) {
                    try {
                        const response = await fetch(`/orders/cancel/${orderId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ cancellationReason: reason || '' })
                        });
                        const result = await response.json();
                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Order cancelled successfully',
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => location.reload());
                        } else {
                            Swal.fire('Error', result.message || 'Failed to cancel order', 'error')
                            .then(() => location.reload());                        }
                    } catch (error) {
                        Swal.fire('Error', error.message || 'Failed to cancel order', 'error');
                    }
                }
            }
    
            // Return order
            async function returnOrder(orderId) {
                const { value: reason } = await Swal.fire({
                    title: 'Return Order',
                    input: 'select',
                    inputLabel: 'Reason for return (mandatory)',
                    inputPlaceholder: 'Select a reason',
                    showCancelButton: true,
                    inputOptions: {
                        'defective': 'Item is defective or damaged',
                        'wrong_item': 'Received the wrong item',
                        'not_as_described': 'Item not as described',
                        'changed_mind': 'Changed my mind',
                        'other': 'Other'
                    },
                    inputValidator: (value) => {
                        if (!value) {
                            return 'You must select a reason!';
                        }
                    },
                    inputAttributes: {
                        style: 'width: 80%; padding: 8px; font-size: 16px;'
                    }
                });
    
                if (reason) {
                    try {
                        const response = await fetch(`/orders/return/${orderId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ returnReason: reason })
                        });
                        const result = await response.json();
                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Return request submitted',
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => location.reload());
                        } else {
                            Swal.fire('Error', result.message || 'Failed to return order', 'error');
                        }
                    } catch (error) {
                        Swal.fire('Error', error.message || 'Failed to return order', 'error');
                    }
                }
            }
        </script>
    </body>
</html>