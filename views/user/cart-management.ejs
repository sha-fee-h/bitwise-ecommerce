<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart | Bitwise</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    
    <!-- Custom CSS -->
    
    <link rel="stylesheet" type="text/css" href="/css/user/header.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/cart.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/footer.css">


    
</head>
<body>
    <%- include('./partials/header.ejs') %>

    <div class="cart-container">
        <h2>Shopping Cart</h2>
        <div class="cart-grid">
            <!-- Cart Items Section -->
            <div class="cart-items-section">
                <div id="cartItems">
                    <% if (cart && cart.products.length > 0) { %>
                        <% cart.products.forEach(product => { %>
                            <% const stockAvailable = product.productId.stock; %>
                            <% const isOutOfStock = stockAvailable < product.quantity; %>
                            <% const isProductUnlisted = product.productId.status === 'unlisted'; %>
                            <% const isCategoryUnlisted = product.productId.category && product.productId.category.status === 'unlisted'; %>
                            <% const isUnavailable = isProductUnlisted || isCategoryUnlisted; %>
        
                            <div class="cart-item" data-product-id="<%= product.productId._id %>" data-stock="<%= stockAvailable %>" data-quantity="<%= product.quantity %>">
                                <a href="/products/product-detail/<%= product.productId._id %>">
                                    <img src="/uploads/<%= product.productId.images[0] %>" alt="<%= product.productId.name %>" class="cart-image">
                                </a>
                                <div class="item-details">
                                    <p><strong><%= product.productId.name %></strong></p>
                                    <div class="price-section">
                                        <% if (product.offerDiscount > 0) { %>
                                            <span class="original-price">₹<%= (product.price * product.quantity).toFixed(2) %></span>
                                            <span class="offer-price">₹<%= product.productTotal.toFixed(2) %></span>
                                        <% } else { %>
                                            <span class="offer-price">₹<%= (product.price * product.quantity).toFixed(2) %></span>
                                        <% } %>
                                    </div>
                                    <% if (isUnavailable || isOutOfStock) { %>
                                        <p class="unavailablle-text">Product is unavailable</p>
                                        <% if (isOutOfStock) { %>
                                            <p class="out-of-stock">Stock: Out of Stock</p>
                                        <% } else if (isProductUnlisted) { %>
                                            <p class="unlistedd-text">Product is unlisted</p>
                                        <% } else if (isCategoryUnlisted) { %>
                                            <p class="unlistedd-text">Category is unlisted</p>
                                        <% } %>
                                    <% } else { %>
                                        <p class="in-stock">Stock: <%= stockAvailable %></p>
                                    <% } %>
                                </div>
                                <div class="quantity-controls">
                                    <button class="qty-btn" onclick="updateQuantity('<%= product.productId._id %>', -1)" <%= isUnavailable ? 'disabled' : '' %>>-</button>
                                    <span class="quantity"><%= product.quantity %></span>
                                    <button class="qty-btn" onclick="updateQuantity('<%= product.productId._id %>', 1)" <%= isUnavailable || isOutOfStock ? 'disabled' : '' %>>+</button>
                                </div>
                                <div class="actions">
                                    <button class="remove-btn" onclick="removeFromCart('<%= product.productId._id %>')">Remove</button>
                                    <button class="wishlist-btn" onclick="moveToWishlist('<%= product.productId._id %>')">Move to Wishlist</button>
                                </div>
                            </div>
                        <% }); %>
                        <button class="clear-cart-btn" onclick="clearCart()">Clear Cart</button>
                    <% } else { %>
                        <p class="empty-cart" id="emptyCartMessage">Your cart is empty.</p>
                    <% } %>
                </div>
            </div>
    
            <!-- Price Breakdown Section -->
            <div class="price-breakdown" id="priceBreakdown">
                <% if (cart && cart.products.length > 0) { %>
                    <h3>Order Summary</h3>
                    <p>Subtotal: <span id="totalPrice">₹<%= subTotal.toFixed(2) %></span></p>
                    <p>Discount: <span id="discount">₹<%= cartDiscount.toFixed(2) %></span></p>
                    <p class="total">Cart Total: <span id="finalTotal">₹<%= finalTotal.toFixed(2) %></span></p>
                    <button id="checkoutBtn" class="checkout-btn" 
                        <%= cart && cart.products.length > 0 && cart.products.every(p => p.productId.stock >= p.quantity && p.productId.status !== 'unlisted' && (!p.productId.category || p.productId.category.status !== 'unlisted')) ? '' : 'disabled' %> 
                        onclick="checkout()">
                        Proceed to Checkout
                    </button>
                <% } %>
            </div>
        </div>
    </div>

<%- include('./partials/footer') %>


    <!-- Bootstrap JS and Dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
        <script>
            // Function to fetch updated cart data
            async function fetchCartData() {
                try {
                    const response = await fetch('/cart/data', {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
        
                    const result = await response.json();
        
                    if (response.ok) {
                        updateCartUI(result.cart, result.subTotal, result.cartDiscount, result.finalTotal);
                    } else {
                        throw new Error(result.error || 'Failed to fetch cart data.');
                    }
                } catch (error) {
                    console.error('Error fetching cart data:', error);
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        text: error.message || "Failed to fetch cart data.",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#060318",
                        showCancelButton: true,
                        cancelButtonText: "Cancel",
                        cancelButtonColor: "#565564",
                        customClass: {
                            popup: 'swal-custom-popup',
                            title: 'swal-custom-title',
                            htmlContainer: 'swal-custom-text',
                            icon: 'swal-custom-icon',
                            confirmButton: 'swal-custom-button',
                            cancelButton: 'swal-custom-cancel-button'
                        }
                    });
                }
            }
        
            // Function to fetch updated cart and wishlist counts (for the header)
            async function fetchCounts() {
                try {
                    const response = await fetch('/check-count', {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
        
                    const result = await response.json();
        
                    if (response.ok) {
                        // Update the cart count in the header
                        const cartCountElement = document.getElementById('cart-count');
                        if (cartCountElement) {
                            cartCountElement.textContent = result.cartCount;
                        }
        
                        // Update the wishlist count in the header
                        const wishlistCountElement = document.getElementById('wishlist-count');
                        if (wishlistCountElement) {
                            wishlistCountElement.textContent = result.wishlistCount;
                        }
                    } else {
                        console.error('Failed to fetch counts:', result.error);
                    }
                } catch (error) {
                    console.error('Error fetching counts:', error);
                }
            }
        
            // Function to update the cart UI dynamically
            function updateCartUI(cart, subTotal, cartDiscount, finalTotal) {
                const cartItemsContainer = document.getElementById('cartItems');
                const priceBreakdownContainer = document.getElementById('priceBreakdown');
                const checkoutBtn = document.getElementById('checkoutBtn');
        
                // Update cart items
                if (cart && cart.products.length > 0) {
                    let cartHTML = '';
                    let allItemsAvailable = true;
        
                    cart.products.forEach(product => {
                        const stockAvailable = product.productId.stock;
                        const isOutOfStock = stockAvailable < product.quantity;
                        const isProductUnlisted = product.productId.status === 'unlisted';
                        const isCategoryUnlisted = product.productId.category && product.productId.category.status === 'unlisted';
                        const isUnavailable = isProductUnlisted || isCategoryUnlisted;
        
                        if (isOutOfStock || isUnavailable) {
                            allItemsAvailable = false;
                        }
        
                        cartHTML += `
                            <div class="cart-item" data-product-id="${product.productId._id}" data-stock="${stockAvailable}" data-quantity="${product.quantity}">
                                <a href="/products/product-detail/${product.productId._id}">
                                    <img src="/uploads/${product.productId.images[0]}" alt="${product.productId.name}" class="cart-image">
                                </a>
                                <div class="item-details">
                                    <p><strong>${product.productId.name}</strong></p>
                                    <div class="price-section">
                                        ${product.offerDiscount > 0 ? `
                                            <span class="original-price">₹${(product.price * product.quantity).toFixed(2)}</span>
                                            <span class="offer-price">₹${product.productTotal.toFixed(2)}</span>
                                        ` : `
                                            <span class="offer-price">₹${(product.price * product.quantity).toFixed(2)}</span>
                                        `}
                                    </div>
                                    ${isUnavailable || isOutOfStock ? `
                                        <p class="unavailablle-text">Product is unavailable</p>
                                        ${isOutOfStock ? `<p class="out-of-stock">Stock: Out of Stock</p>` : ''}
                                        ${isProductUnlisted ? `<p class="unlistedd-text">Product is unlisted</p>` : ''}
                                        ${isCategoryUnlisted ? `<p class="unlistedd-text">Category is unlisted</p>` : ''}
                                    ` : `
                                        <p class="in-stock">Stock: ${stockAvailable}</p>
                                    `}
                                </div>
                                <div class="quantity-controls">
                                    <button class="qty-btn" onclick="updateQuantity('${product.productId._id}', -1)" ${isUnavailable || product.quantity==1 ? 'disabled' : ''}>-</button>
                                    <span class="quantity">${product.quantity}</span>
                                    <button class="qty-btn" onclick="updateQuantity('${product.productId._id}', 1)" ${isUnavailable || isOutOfStock || product.quantity==5 ? 'disabled' : ''}>+</button>
                                </div>
                                <div class="actions">
                                    <button class="remove-btn" onclick="removeFromCart('${product.productId._id}')">Remove</button>
                                    <button class="wishlist-btn" onclick="moveToWishlist('${product.productId._id}')">Move to Wishlist</button>
                                </div>
                            </div>
                        `;
                    });
        
                    cartHTML += `<button class="clear-cart-btn" onclick="clearCart()">Clear Cart</button>`;
                    cartItemsContainer.innerHTML = cartHTML;
        
                    // Update price breakdown
                    priceBreakdownContainer.innerHTML = `
                        <h3>Order Summary</h3>
                        <p>Subtotal: <span id="totalPrice">₹${subTotal.toFixed(2)}</span></p>
                        <p>Discount: <span id="discount">₹${cartDiscount.toFixed(2)}</span></p>
                        <p class="total">Cart Total: <span id="finalTotal">₹${finalTotal.toFixed(2)}</span></p>
                        <button id="checkoutBtn" class="checkout-btn" ${allItemsAvailable ? '' : 'disabled'} onclick="checkout()">
                            Proceed to Checkout
                        </button>
                    `;
                } else {
                    cartItemsContainer.innerHTML = `<p class="empty-cart" id="emptyCartMessage">Your cart is empty.</p>`;
                    priceBreakdownContainer.innerHTML = '';
                }
            }
        
            // Update quantity
            async function updateQuantity(productId, change) {
                try {
                    const response = await fetch(`/cart/update/${productId}`, {
                        method: "PATCH",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ change })
                    });
        
                    const result = await response.json();
                    if (response.ok && result.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Quantity Updated",
                            text: "Cart quantity has been updated!",
                            showConfirmButton: false,
                            timer: 1500,
                            customClass: {
                                popup: 'swal-custom-popup',
                                title: 'swal-custom-title',
                                htmlContainer: 'swal-custom-text',
                                icon: 'swal-custom-icon'
                            }
                        });
                        await fetchCartData();
                        await fetchCounts();
                    } else {
                        throw new Error(result.error || "Failed to update quantity");
                    }
                } catch (error) {
                    console.error("Error updating quantity:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        text: error.message || "Failed to update quantity.",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#060318",
                        showCancelButton: true,
                        cancelButtonText: "Cancel",
                        cancelButtonColor: "#565564",
                        customClass: {
                            popup: 'swal-custom-popup',
                            title: 'swal-custom-title',
                            htmlContainer: 'swal-custom-text',
                            icon: 'swal-custom-icon',
                            confirmButton: 'swal-custom-button',
                            cancelButton: 'swal-custom-cancel-button'
                        }
                    });
                }
            }
        
            // Remove item from cart
            async function removeFromCart(productId) {
                try {
                    const response = await fetch(`/cart/remove/${productId}`, { method: "DELETE" });
                    const result = await response.json();
                    if (response.ok && result.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Removed from Cart",
                            text: "Product has been removed from your cart!",
                            showConfirmButton: false,
                            timer: 2000,
                            customClass: {
                                popup: 'swal-custom-popup',
                                title: 'swal-custom-title',
                                htmlContainer: 'swal-custom-text',
                                icon: 'swal-custom-icon'
                            }
                        });
                        await fetchCartData();
                        await fetchCounts();
                    } else {
                        throw new Error(result.error || "Failed to remove from cart.");
                    }
                } catch (error) {
                    console.log("Error in remove from cart", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        text: error.message || "Something went wrong.",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#060318",
                        showCancelButton: true,
                        cancelButtonText: "Cancel",
                        cancelButtonColor: "#565564",
                        customClass: {
                            popup: 'swal-custom-popup',
                            title: 'swal-custom-title',
                            htmlContainer: 'swal-custom-text',
                            icon: 'swal-custom-icon',
                            confirmButton: 'swal-custom-button',
                            cancelButton: 'swal-custom-cancel-button'
                        }
                    });
                }
            }
        
            // Move item to wishlist
            async function moveToWishlist(productId) {
                try {
                    const response = await fetch(`/cart/move-to-wishlist/${productId}`, { method: "PATCH" });
                    const result = await response.json();
                    if (response.ok && result.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Moved to Wishlist",
                            text: "Product has been moved to wishlist!",
                            showConfirmButton: false,
                            timer: 2000,
                            customClass: {
                                popup: 'swal-custom-popup',
                                title: 'swal-custom-title',
                                htmlContainer: 'swal-custom-text',
                                icon: 'swal-custom-icon'
                            }
                        });
                        await fetchCartData();
                        await fetchCounts();
                    } else {
                        throw new Error(result.error || "Failed to move to wishlist.");
                    }
                } catch (error) {
                    console.log("Error in moving to wishlist", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        text: error.message || "Something went wrong.",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#060318",
                        showCancelButton: true,
                        cancelButtonText: "Cancel",
                        cancelButtonColor: "#565564",
                        customClass: {
                            popup: 'swal-custom-popup',
                            title: 'swal-custom-title',
                            htmlContainer: 'swal-custom-text',
                            icon: 'swal-custom-icon',
                            confirmButton: 'swal-custom-button',
                            cancelButton: 'swal-custom-cancel-button'
                        }
                    });
                }
            }
        
            // Clear cart
            async function clearCart() {
                try {
                    const response = await fetch('/cart/clear', { method: "DELETE" });
                    const result = await response.json();
                    if (response.ok && result.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Cart Cleared",
                            text: "Your cart has been cleared!",
                            showConfirmButton: false,
                            timer: 2000,
                            customClass: {
                                popup: 'swal-custom-popup',
                                title: 'swal-custom-title',
                                htmlContainer: 'swal-custom-text',
                                icon: 'swal-custom-icon'
                            }
                        });
                        await fetchCartData();
                        await fetchCounts();
                    } else {
                        throw new Error(result.error || "Failed to clear cart.");
                    }
                } catch (error) {
                    console.error("Error clearing cart:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        text: error.message || "Failed to clear cart.",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#060318",
                        showCancelButton: true,
                        cancelButtonText: "Cancel",
                        cancelButtonColor: "#565564",
                        customClass: {
                            popup: 'swal-custom-popup',
                            title: 'swal-custom-title',
                            htmlContainer: 'swal-custom-text',
                            icon: 'swal-custom-icon',
                            confirmButton: 'swal-custom-button',
                            cancelButton: 'swal-custom-cancel-button'
                        }
                    });
                }
            }
        
            // Checkout function
            async function checkout() {
                const cartItems = document.querySelectorAll(".cart-item");
                if (cartItems.length === 0) {
                    Swal.fire({
                        icon: "warning",
                        title: "Empty Cart",
                        text: "Your cart is empty!",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#060318",
                        showCancelButton: true,
                        cancelButtonText: "Cancel",
                        cancelButtonColor: "#565564",
                        customClass: {
                            popup: 'swal-custom-popup',
                            title: 'swal-custom-title',
                            htmlContainer: 'swal-custom-text',
                            icon: 'swal-custom-icon',
                            confirmButton: 'swal-custom-button',
                            cancelButton: 'swal-custom-cancel-button'
                        }
                    });
                    return;
                }
        
                // Client-side check for stock availability
                const outOfStockItems = Array.from(cartItems).some(item => {
                    const stock = parseInt(item.getAttribute('data-stock'));
                    const quantity = parseInt(item.getAttribute('data-quantity'));
                    return stock < quantity;
                });
        
                if (outOfStockItems) {
                    Swal.fire({
                        icon: "warning",
                        title: "Out of Stock",
                        text: "Some products in your cart are out of stock. Please remove them before checkout.",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#060318",
                        showCancelButton: true,
                        cancelButtonText: "Cancel",
                        cancelButtonColor: "#565564",
                        customClass: {
                            popup: 'swal-custom-popup',
                            title: 'swal-custom-title',
                            htmlContainer: 'swal-custom-text',
                            icon: 'swal-custom-icon',
                            confirmButton: 'swal-custom-button',
                            cancelButton: 'swal-custom-cancel-button'
                        }
                    });
                    return;
                }
        
                // Server-side check for stock availability
                try {
                    const response = await fetch('/cart/validate-stock', {
                        method: 'GET',
                        headers: { "Content-Type": "application/json" }
                    });
        
                    const result = await response.json();
                    if (!response.ok || !result.success) {
                        Swal.fire({
                            icon: "warning",
                            title: "Out of Stock",
                            text: result.message || "Some products in your cart are out of stock. Please update your cart.",
                            confirmButtonText: "OK",
                            confirmButtonColor: "#060318",
                            showCancelButton: true,
                            cancelButtonText: "Cancel",
                            cancelButtonColor: "#565564",
                            customClass: {
                                popup: 'swal-custom-popup',
                                title: 'swal-custom-title',
                                htmlContainer: 'swal-custom-text',
                                icon: 'swal-custom-icon',
                                confirmButton: 'swal-custom-button',
                                cancelButton: 'swal-custom-cancel-button'
                            }
                        });
                        await fetchCartData();
                        return;
                    }
        
                    // If stock is available, proceed to checkout
                    window.location.href = "/checkout";
                } catch (error) {
                    console.error("Error validating stock:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        text: "Failed to validate stock. Please try again.",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#060318",
                        showCancelButton: true,
                        cancelButtonText: "Cancel",
                        cancelButtonColor: "#565564",
                        customClass: {
                            popup: 'swal-custom-popup',
                            title: 'swal-custom-title',
                            htmlContainer: 'swal-custom-text',
                            icon: 'swal-custom-icon',
                            confirmButton: 'swal-custom-button',
                            cancelButton: 'swal-custom-cancel-button'
                        }
                    });
                }
            }
        </script>
</body>
</html>