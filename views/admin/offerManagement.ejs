<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offer Management | Bitwise</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="/css/admin/offer-management.css" />
    
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <aside class="unique-sidebar">
            <div class="unique-sidebar-header">
                <h2>Bitwise Admin</h2>
            </div>
            <ul class="unique-sidebar-menu">
                <li class="active"><a href="/admin/dashboard">Dashboard</a></li>
                <li><a href="/admin/user-management">Users</a></li>
                <li><a href="/admin/product-management">Products</a></li>
                <li><a href="/admin/orders/manage">Orders</a></li>
                <li><a href="/admin/category-management">Categories</a></li>
                <li><a href="/admin/coupon-management">Coupon</a></li>
                <li><a href="/admin/offer-management">Offers</a></li>
                <li><a href="/admin/inventory">Inventory</a></li>
                <li><a href="/admin/sales-report">Sales</a></li>
                <li><a href="/admin/transactions">Transactions</a></li>
            </ul>
        </aside>

        <!-- Main Content -->
<div class="product-list-container">
    <h1>Offer Management</h1>

    <!-- Breadcrumbs -->
    <nav class="breadcrumbs">
        <a href="/admin/dashboard">Dashboard</a>
        <span>></span>
        <a href="/admin/offer-management">Offer Management</a>
    </nav>

    <!-- Forms Container -->
    <div class="forms-container">
        <!-- Product Offer Form -->
        <div class="form-section">
            <h3>Add Product Offer</h3>
            <form id="productOfferForm">
                <div class="form-group">
                    <label for="categoryFilter">Select Category:</label>
                    <select id="categoryFilter" name="categoryFilter" required>
                        <option value="">-- Select Category --</option>
                        <% categories.forEach(category => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                        <% }) %>
                    </select>
                </div>
                <div class="form-group">
                    <label for="productId">Select Product:</label>
                    <select id="productId" name="productId" required>
                        <option value="">-- Select Product --</option>
                        <!-- Products will be populated dynamically -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="discountPercentage">Discount Percentage:</label>
                    <input type="number" id="discountPercentage" name="discountPercentage" min="0" max="100" required>
                </div>
                <div class="form-group">
                    <label for="startDate">Start Date:</label>
                    <input type="date" id="startDate" name="startDate" required>
                </div>
                <div class="form-group">
                    <label for="endDate">End Date:</label>
                    <input type="date" id="endDate" name="endDate" required>
                </div>
                <button type="submit">Add Product Offer</button>
            </form>
        </div>

        <!-- Category Offer Form -->
        <div class="form-section">
            <h3>Add Category Offer</h3>
            <form id="categoryOfferForm">
                <div class="form-group">
                    <label for="categoryId">Select Category:</label>
                    <select id="categoryId" name="categoryId" required>
                        <option value="">-- Select Category --</option>
                        <% categories.forEach(category => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                        <% }) %>
                    </select>
                </div>
                <div class="form-group">
                    <label for="discountPercentage">Discount Percentage:</label>
                    <input type="number" id="discountPercentage" name="discountPercentage" min="0" max="100" required>
                </div>
                <div class="form-group">
                    <label for="startDate">Start Date:</label>
                    <input type="date" id="startDate" name="startDate" required>
                </div>
                <div class="form-group">
                    <label for="endDate">End Date:</label>
                    <input type="date" id="endDate" name="endDate" required>
                </div>
                <button type="submit">Add Category Offer</button>
            </form>
        </div>
    </div>

    <!-- Offers Table -->
    <div class="offers-section">
        <h3>Existing Offers</h3>
        <table id="offersTable">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Target</th>
                    <th>Discount (%)</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="offersTableBody">
                <!-- Offers will be dynamically inserted here -->
            </tbody>
        </table>

        <!-- Pagination Controls -->
        <div class="pagination" id="paginationControls">
            <p id="paginationInfo"></p>
            <div class="pagination-links" id="paginationLinks"></div>
        </div>
    </div>
</div>

<script>
    // Store all products for filtering
    const allProducts = <%- JSON.stringify(products) %>;
    let currentPage = 1;
    const defaultLimit = 5;

    // Function to filter products by category
    function filterProductsByCategory(categoryId) {
        const productSelect = document.getElementById('productId');
        productSelect.innerHTML = '<option value="">-- Select Product --</option>';
        
        if (categoryId) {
            const filteredProducts = allProducts.filter(product => 
                product.category && product.category.toString() === categoryId
            );
            
            filteredProducts.forEach(product => {
                const option = document.createElement('option');
                option.value = product._id;
                option.textContent = product.name;
                productSelect.appendChild(option);
            });
        }
    }

    // Add event listener for category filter
    document.getElementById('categoryFilter').addEventListener('change', (e) => {
        const categoryId = e.target.value;
        filterProductsByCategory(categoryId);
    });

    // Load existing offers with pagination
    async function loadOffers(page = 1, limit = defaultLimit) {
        try {
            currentPage = page;
            const response = await fetch(`/admin/offers?page=${page}&limit=${limit}`);
            const result = await response.json();

            if (!result.success) {
                throw new Error(result.message || 'Failed to fetch offers');
            }

            const { offers, currentPage: serverPage, totalPages, totalOffers } = result;

            const tbody = document.querySelector('#offersTableBody');
            tbody.innerHTML = '';

            offers.forEach(offer => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${offer.type.charAt(0).toUpperCase() + offer.type.slice(1)}</td>
                    <td>${offer.type === 'Product' ? offer.productId?.name || 'N/A' : offer.categoryId?.name || 'N/A'}</td>
                    <td>${offer.discountPercentage}</td>
                    <td>${new Date(offer.startDate).toLocaleDateString()}</td>
                    <td>${new Date(offer.endDate).toLocaleDateString()}</td>
                    <td class="${offer.isActive ? 'active' : 'inactive'}">${offer.isActive ? 'Active' : 'Inactive'}</td>
                    <td>
                        <button class="toggle-btn ${offer.isActive ? 'unlist-btn' : 'list-btn'}" 
                                onclick="toggleOfferStatus('${offer._id}', ${offer.isActive})">
                            ${offer.isActive ? 'Unlist' : 'List'}
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            const paginationInfo = document.getElementById('paginationInfo');
            paginationInfo.textContent = `Showing ${offers.length} of ${totalOffers} offers`;

            const paginationLinks = document.getElementById('paginationLinks');
            paginationLinks.innerHTML = '';

            if (currentPage > 1) {
                const prevLink = document.createElement('a');
                prevLink.href = '#';
                prevLink.textContent = 'Previous';
                prevLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    loadOffers(currentPage - 1, limit);
                });
                paginationLinks.appendChild(prevLink);
            }

            for (let i = 1; i <= totalPages; i++) {
                const pageLink = document.createElement('a');
                pageLink.href = '#';
                pageLink.textContent = i;
                pageLink.className = currentPage === i ? 'active' : '';
                pageLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    loadOffers(i, limit);
                });
                paginationLinks.appendChild(pageLink);
            }

            if (currentPage < totalPages) {
                const nextLink = document.createElement('a');
                nextLink.href = '#';
                nextLink.textContent = 'Next';
                nextLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    loadOffers(currentPage + 1, limit);
                });
                paginationLinks.appendChild(nextLink);
            }
        } catch (error) {
            console.error('Error fetching offers:', error);
            Swal.fire({
                title: 'Error!',
                text: error.message,
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    }

    // Handle Product Offer Form submission
    document.getElementById('productOfferForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);

        const confirmation = await Swal.fire({
            title: 'Confirm Addition',
            text: 'Are you sure you want to add this product offer?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#00a8e8',
            cancelButtonColor: '#ff3a30',
            confirmButtonText: 'Yes, add it!'
        });

        if (confirmation.isConfirmed) {
            const response = await fetch('/admin/offers/product', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            });
            const result = await response.json();

            if (result.success) {
                await Swal.fire({
                    title: 'Success!',
                    text: 'Product offer created successfully!',
                    icon: 'success',
                    confirmButtonColor: '#00a8e8'
                });
                e.target.reset();
                loadOffers(1, defaultLimit);
            } else {
                await Swal.fire({
                    title: 'Error!',
                    text: result.message || 'Failed to create product offer',
                    icon: 'error',
                    confirmButtonColor: '#ff3a30'
                });
            }
        }
    });

    // Handle Category Offer Form submission
    document.getElementById('categoryOfferForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);

        const confirmation = await Swal.fire({
            title: 'Confirm Addition',
            text: 'Are you sure you want to add this category offer?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#00a8e8',
            cancelButtonColor: '#ff3a30',
            confirmButtonText: 'Yes, add it!'
        });

        if (confirmation.isConfirmed) {
            const response = await fetch('/admin/offers/category', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            });
            const result = await response.json();

            if (result.success) {
                await Swal.fire({
                    title: 'Success!',
                    text: 'Category offer created successfully!',
                    icon: 'success',
                    confirmButtonColor: '#00a8e8'
                });
                e.target.reset();
                loadOffers(1, defaultLimit);
            } else {
                await Swal.fire({
                    title: 'Error!',
                    text: result.message || 'Failed to create category offer',
                    icon: 'error',
                    confirmButtonColor: '#ff3a30'
                });
            }
        }
    });

    // Toggle Offer Status
    async function toggleOfferStatus(offerId, isActive) {
        const action = isActive ? 'unlist' : 'list';
        const confirmation = await Swal.fire({
            title: `Confirm ${action.charAt(0).toUpperCase() + action.slice(1)}`,
            text: `Are you sure you want to ${action} this offer?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#00a8e8',
            cancelButtonColor: '#ff3a30',
            confirmButtonText: `Yes, ${action} it!`
        });

        if (confirmation.isConfirmed) {
            const response = await fetch(`/admin/offers/toggle/${offerId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
            });
            const result = await response.json();

            if (result.success) {
                await Swal.fire({
                    title: 'Success!',
                    text: result.message,
                    icon: 'success',
                    confirmButtonColor: '#00a8e8'
                });
                loadOffers(currentPage, defaultLimit);
            } else {
                await Swal.fire({
                    title: 'Error!',
                    text: result.message || `Failed to ${action} offer`,
                    icon: 'error',
                    confirmButtonColor: '#ff3a30'
                });
            }
        }
    }

    // Load offers on page load
    document.addEventListener('DOMContentLoaded', () => {
        loadOffers(1, defaultLimit);
    });
</script>
</body>
</html>