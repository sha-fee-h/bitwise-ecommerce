<!-- views/user/checkout.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout | Bitwise</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        /* Modern Checkout Styles */
        :root {
            --primary-color: #2563eb; /* Vibrant blue */
            --secondary-color: #16a34a; /* Fresh green */
            --accent-color: #9333ea; /* Purple accent */
            --text-color: #1f2937; /* Dark gray */
            --light-bg: #f9fafb; /* Light gray background */
            --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            --border-radius: 12px;
        }

        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 20px;
            background: #fff;
            color: var(--text-color);
        }

        .containerr {
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px;
            background: #fff;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            transition: transform 0.3s ease;
        }

        h2 {
            text-align: center;
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 30px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-color);
            margin-bottom: 20px;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 5px;
        }

        /* Sections */
        .address-section, .summary-section, .payment-section, .coupon-section, .final-summary {
            background: var(--light-bg);
            padding: 20px;
            border-radius: var(--border-radius);
            margin-bottom: 25px;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
        }

        .address-section:hover, .summary-section:hover, .payment-section:hover, .coupon-section:hover, .final-summary:hover {
            transform: translateY(-5px);
        }

        /* Address Items */
        .address-item {
            padding: 15px;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            margin-bottom: 15px;
            background: #fff;
            transition: border-color 0.3s ease;
        }

        .address-item:hover {
            border-color: var(--primary-color);
        }

        .default-address {
            border-color: var(--secondary-color);
            background-color: #f0fdf4;
        }

        .address-item p {
            margin: 5px 0;
            font-size: 1rem;
            color: var(--text-color);
        }

        /* Checkout Items */
        .checkout-item {
            display: flex;
            align-items: center;
            background: #fff;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s ease;
        }

        .checkout-item:hover {
            transform: scale(1.02);
        }

        .checkout-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 8px;
            border: 2px solid #e5e7eb;
            margin-right: 15px;
        }

        .item-details p {
            margin: 5px 0;
            font-size: 1rem;
            color: var(--text-color);
        }

        .item-details strong {
            font-weight: 600;
            color: var(--primary-color);
        }

        /* Buttons */
        .add-address-btn, .place-order-btn, .apply-coupon-btn, .remove-coupon-btn {
            background: linear-gradient(135deg, var(--primary-color), #1d4ed8);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            text-transform: uppercase;
            transition: all 0.3s ease;
        }

        .add-address-btn:hover, .place-order-btn:hover, .apply-coupon-btn:hover, .remove-coupon-btn:hover {
            background: linear-gradient(135deg, #1d4ed8, var(--primary-color));
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(37, 99, 235, 0.3);
        }

        /* Coupon Section */
        .coupon-section {
            display: flex;
            align-items: center;
            gap: 15px;
            background: #fff;
            padding: 15px;
        }

        .coupon-input {
            padding: 10px;
            width: 250px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .coupon-input:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 5px rgba(37, 99, 235, 0.3);
        }

        /* Payment Section */
        .payment-section label {
            display: block;
            margin: 10px 0;
            font-size: 1rem;
            color: var(--text-color);
            cursor: pointer;
        }

        .payment-section input[type="radio"] {
            margin-right: 10px;
            accent-color: var(--primary-color);
        }

        /* Final Summary */
        .final-summary {
            text-align: center;
        }

        .final-summary p {
            font-size: 1.1rem;
            margin: 10px 0;
            color: var(--text-color);
        }

        .final-summary p strong {
            color: var(--accent-color);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(3px);
        }

        .modal-content {
            background: #fff;
            margin: 10% auto;
            padding: 25px;
            border-radius: var(--border-radius);
            width: 90%;
            max-width: 550px;
            box-shadow: var(--shadow);
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 30px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .close:hover, .close:focus {
            color: var(--primary-color);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-color);
        }

        .form-group input, .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group textarea:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 5px rgba(37, 99, 235, 0.3);
        }

        .save-address-btn {
            background: linear-gradient(135deg, var(--secondary-color), #15803d);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .save-address-btn:hover {
            background: linear-gradient(135deg, #15803d, var(--secondary-color));
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(22, 163, 74, 0.3);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container { padding: 20px; }
            h2 { font-size: 2rem; }
            .checkout-item { flex-direction: column; align-items: flex-start; }
            .checkout-image { margin-bottom: 10px; }
            .coupon-section { flex-direction: column; }
            .coupon-input { width: 100%; }
        }
    </style>
    <link rel="icon" type="image/png" href="images/icons/favicon.png" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/bootstrap/css/bootstrap.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/font-awesome-4.7.0/css/font-awesome.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/iconic/css/material-design-iconic-font.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/linearicons-v1.0.0/icon-font.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/animate/animate.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/css-hamburgers/hamburgers.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/animsition/css/animsition.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/select2/select2.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/daterangepicker/daterangepicker.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/slick/slick.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/MagnificPopup/magnific-popup.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/perfect-scrollbar/perfect-scrollbar.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/css/user/util.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/main.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="/css/user/header.css" />
</head>
<body>
    <%- include('./partials/header.ejs') %>

    <div class="containerr" style="margin-top: 2em;">
        <h2>Checkout</h2>

        <!-- Address Section -->
        <div class="address-section">
            <h3>Select Address</h3>
            <div id="addresses">
                <% addresses.forEach(address => { %>
                    <div class="address-item <%= address.isDefault ? 'default-address' : '' %>">
                        <p><strong><%= address.firstName %> <%= address.lastName %></strong></p>
                        <p><%= address.street %>, <%= address.city %>, <%= address.state %> - <%= address.postalCode %>, <%= address.country %></p>
                        <p>Phone: <%= address.phoneNumber %></p>
                        <button class="edit-address-btn" onclick="editAddress('<%= address._id %>')">Edit</button>
                        <input type="radio" name="selectedAddress" value="<%= address._id %>" <%= address.isDefault ? 'checked' : '' %>>
                    </div>
                <% }); %>
            </div>
            <button class="add-address-btn" onclick="openAddressModal('add')">Add New Address</button>
        </div>

        <!-- Product Summary -->
        <div class="summary-section">
            <h3>Order Summary</h3>
            <div id="checkoutProducts">
                <% checkoutProducts.forEach(product => { %>
                    <div class="checkout-item">
                        <img src="/uploads/<%= product.image %>" alt="<%= product.name %>" class="checkout-image">
                        <div class="item-details">
                            <p><strong><%= product.name %></strong></p>
                            <p>Price: ₹<%= product.price.toFixed(2) %> x <%= product.quantity %></p>
                            <% if (product.offerDiscount > 0) { %>
                                <p>Offer Discount: ₹<%= product.offerDiscount.toFixed(2) %></p>
                                <p><strong>Total: ₹<%= product.productTotal.toFixed(2) %></strong></p>
                            <% } else { %>
                                <p><strong>Total: ₹<%= (product.price * product.quantity).toFixed(2) %></strong></p>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>

        <!-- Coupon Section -->
        <div class="coupon-section">
            <input type="text" id="couponCode" class="coupon-input" placeholder="Enter Coupon Code" <%= appliedCoupon ? 'disabled' : '' %> value="<%= appliedCoupon || '' %>">
            <% if (appliedCoupon) { %>
                <button class="remove-coupon-btn" onclick="removeCoupon()">Remove Coupon</button>
            <% } else { %>
                <button class="apply-coupon-btn" onclick="applyCoupon()">Apply Coupon</button>
            <% } %>
        </div>

        <!-- Payment Section -->
        <div class="payment-section">
            <h3>Payment Method</h3>
            <label>
                <input type="radio" name="paymentMethod" value="Cash on Delivery" <%= finalTotal <= 1000 ? '' : 'disabled' %>> Cash on Delivery
            </label>
            <% if (finalTotal > 1000) { %>
                <p style="color: #dc3545; font-size: 0.9rem; margin-top: 5px;">COD only available for orders below ₹1000</p>
            <% } %>
            <label>
                <input type="radio" name="paymentMethod" value="Razorpay"> Razorpay
            </label>
        </div>

        <!-- Final Summary and Place Order -->
        <div class="final-summary">
            <p>Subtotal: <span id="subtotal">₹<%= subtotal.toFixed(2) %></span></p>
            <p>Offer Discount: <span id="offerDiscount">₹<%= totalDiscount.toFixed(2) %></span></p>
            <p>Coupon Discount: <span id="couponDiscount">₹<%= couponDiscount.toFixed(2) %></span></p>
            <p>Shipping: <span id="shipping">₹<%= shippingCharge.toFixed(2) %></span></p>
            <p><strong>Grand Total: <span id="total">₹<%= finalTotal.toFixed(2) %></strong></p>
            <button class="place-order-btn" <%= isStockAvailable ? '' : 'disabled' %> onclick="placeOrder()">Place Order</button>
        </div>
    </div>

    <!-- Address Modal -->
    <div id="addressModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddressModal()">×</span>
            <h2 id="modalTitle">Add New Address</h2>
            <form id="addressForm">
                <input type="hidden" id="addressId" name="addressId">
                <div class="form-group">
                    <label for="firstName">First Name:</label>
                    <input type="text" id="firstName" name="firstName" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name:</label>
                    <input type="text" id="lastName" name="lastName">
                </div>
                <div class="form-group">
                    <label for="phoneNumber">Phone Number:</label>
                    <input type="text" id="phoneNumber" name="phoneNumber" required>
                </div>
                <div class="form-group">
                    <label for="street">Street:</label>
                    <input type="text" id="street" name="street" required>
                </div>
                <div class="form-group">
                    <label for="city">City:</label>
                    <input type="text" id="city" name="city" required>
                </div>
                <div class="form-group">
                    <label for="state">State:</label>
                    <input type="text" id="state" name="state" required>
                </div>
                <div class="form-group">
                    <label for="postalCode">Postal Code:</label>
                    <input type="text" id="postalCode" name="postalCode" required>
                </div>
                <div class="form-group">
                    <label for="country">Country:</label>
                    <input type="text" id="country" name="country" required>
                </div>
                <div class="form-group">
                    <label for="additionalInfo">Additional Info:</label>
                    <textarea id="additionalInfo" name="additionalInfo"></textarea>
                </div>
                <div class="form-group">
                    <label><input type="checkbox" id="isDefault" name="isDefault"> Set as Default</label>
                </div>
                <button type="submit" class="save-address-btn">Save Address</button>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", async () => {
            await loadAddresses();
        });

        async function loadAddresses() {
            const response = await fetch("/checkout/addresses");
            const result = await response.json();
            const addresses = result.addresses;
            const addressContainer = document.getElementById("addresses");
            addressContainer.innerHTML = "";

            addresses.forEach(address => {
                const addressHTML = `
                    <div class="address-item ${address.isDefault ? 'default-address' : ''}">
                        <p><strong>${address.firstName} ${address.lastName}</strong></p>
                        <p>${address.street}, ${address.city}, ${address.state} - ${address.postalCode}, ${address.country}</p>
                        <p>Phone: ${address.phoneNumber}</p>
                        <button class="edit-address-btn" onclick="editAddress('${address._id}')">Edit</button>
                        <input type="radio" name="selectedAddress" value="${address._id}" ${address.isDefault ? 'checked' : ''}>
                    </div>
                `;
                addressContainer.innerHTML += addressHTML;
            });
        }

        function openAddressModal(mode = 'add', address = null) {
            const modal = document.getElementById("addressModal");
            const form = document.getElementById("addressForm");
            const title = document.getElementById("modalTitle");

            modal.style.display = "block";
            title.innerText = mode === 'add' ? "Add New Address" : "Edit Address";

            if (mode === 'edit' && address) {
                document.getElementById("addressId").value = address._id;
                document.getElementById("firstName").value = address.firstName;
                document.getElementById("lastName").value = address.lastName || '';
                document.getElementById("phoneNumber").value = address.phoneNumber;
                document.getElementById("street").value = address.street;
                document.getElementById("city").value = address.city;
                document.getElementById("state").value = address.state;
                document.getElementById("postalCode").value = address.postalCode;
                document.getElementById("country").value = address.country;
                document.getElementById("additionalInfo").value = address.additionalInfo || '';
                document.getElementById("isDefault").checked = address.isDefault;
            } else {
                form.reset();
                document.getElementById("addressId").value = '';
            }
        }

        function closeAddressModal() {
            document.getElementById("addressModal").style.display = "none";
        }

        async function editAddress(addressId) {
            const response = await fetch(`/checkout/address/${addressId}`);
            const result = await response.json();
            const address = result.address;
            openAddressModal('edit', address);
        }

        document.getElementById("addressForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const addressData = Object.fromEntries(formData);

            addressData.isDefault = addressData.isDefault === "on" ? true : false;

            const method = addressData.addressId ? 'PUT' : 'POST';
            const url = addressData.addressId ? `/checkout/address/${addressData.addressId}` : '/checkout/add-address';

            try {
                const response = await fetch(url, {
                    method: method,
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(addressData)
                });

                const result = await response.json();
                if (result.success) {
                    closeAddressModal();
                    await loadAddresses();
                } else {
                    alert(result.message || "Failed to save address");
                }
            } catch (error) {
                console.error("Error saving address:", error);
                alert("An error occurred while saving the address");
            }
        });

        async function applyCoupon() {
            const couponCode = document.getElementById("couponCode").value.trim();
            if (!couponCode) {
                Swal.fire({ icon: "warning", title: "Empty Coupon", text: "Please enter a coupon code!" });
                return;
            }

            try {
                const response = await fetch('/checkout/apply-coupon', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ couponCode })
                });

                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Coupon Applied",
                        text: result.message,
                        showConfirmButton: false,
                        timer: 1500
                    });

                    document.getElementById("subtotal").innerText = `₹${result.subtotal.toFixed(2)}`;
                    document.getElementById("offerDiscount").innerText = `₹${result.totalDiscount.toFixed(2)}`;
                    document.getElementById("couponDiscount").innerText = `₹${result.couponDiscount.toFixed(2)}`;
                    document.getElementById("shipping").innerText = `₹${result.shippingCharge.toFixed(2)}`;
                    document.getElementById("total").innerText = `₹${result.finalTotal.toFixed(2)}`;
                    document.getElementById("couponCode").disabled = true;

                    const couponSection = document.querySelector('.coupon-section');
                    couponSection.innerHTML = `
                        <input type="text" id="couponCode" class="coupon-input" placeholder="Enter Coupon Code" disabled value="${result.appliedCoupon}">
                        <button class="remove-coupon-btn" onclick="removeCoupon()">Remove Coupon</button>
                    `;
                } else {
                    Swal.fire({ icon: "error", title: "Error", text: result.message });
                }
            } catch (error) {
                console.error("Error applying coupon:", error);
                Swal.fire({ icon: "error", title: "Error", text: "Failed to apply coupon" });
            }
        }

        async function removeCoupon() {
            const confirmation = await Swal.fire({
                title: 'Confirm Removal',
                text: 'Are you sure you want to remove this coupon?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#2563eb',
                cancelButtonColor: '#ff3a30',
                confirmButtonText: 'Yes, remove it!'
            });

            if (confirmation.isConfirmed) {
                try {
                    const response = await fetch('/checkout/remove-coupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Coupon Removed",
                            text: result.message,
                            showConfirmButton: false,
                            timer: 1500
                        });

                        document.getElementById("subtotal").innerText = `₹${result.subtotal.toFixed(2)}`;
                        document.getElementById("offerDiscount").innerText = `₹${result.totalDiscount.toFixed(2)}`;
                        document.getElementById("couponDiscount").innerText = `₹${result.couponDiscount.toFixed(2)}`;
                        document.getElementById("shipping").innerText = `₹${result.shippingCharge.toFixed(2)}`;
                        document.getElementById("total").innerText = `₹${result.finalTotal.toFixed(2)}`;
                        document.getElementById("couponCode").disabled = false;

                        const couponSection = document.querySelector('.coupon-section');
                        couponSection.innerHTML = `
                            <input type="text" id="couponCode" class="coupon-input" placeholder="Enter Coupon Code">
                            <button class="apply-coupon-btn" onclick="applyCoupon()">Apply Coupon</button>
                        `;
                    } else {
                        Swal.fire({ icon: "error", title: "Error", text: result.message });
                    }
                } catch (error) {
                    console.error("Error removing coupon:", error);
                    Swal.fire({ icon: "error", title: "Error", text: "Failed to remove coupon" });
                }
            }
        }

        async function placeOrder() {
            const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
            const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
            const couponCode = document.getElementById("couponCode")?.value || null;

            if (!selectedAddress) {
                Swal.fire({
                    icon: "error",
                    title: "No Address Selected",
                    text: "Please select an address!"
                });
                return;
            }

            if (!paymentMethod) {
                Swal.fire({
                    icon: "error",
                    title: "No Payment Method",
                    text: "Please select a payment method!"
                });
                return;
            }

            const orderData = {
                selectedAddress: selectedAddress.value,
                paymentMethod,
                couponCode
            };

            if (paymentMethod === "Razorpay") {
                await initiateRazorpayPayment(selectedAddress.value, orderData);
            } else {
                try {
                    const response = await fetch("/checkout/place-order", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(orderData)
                    });

                    const result = await response.json();
                    if (result.success) {
                        window.location.href = `/checkout/order-success?orderId=${result.orderId}`;
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Order Failed!",
                            text: result.message || "Failed to place the order."
                        });
                    }
                } catch (error) {
                    console.error("Error placing order:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Order Failed!",
                        text: error.message || "Failed to place the order."
                    });
                }
            }
        }

        async function initiateRazorpayPayment(selectedAddress, orderData) {
    const orderResponse = await fetch('/checkout/create-razorpay-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ couponCode: orderData.couponCode })
    });
    const razorpayData = await orderResponse.json();

    if (!razorpayData.success) {
        Swal.fire({ icon: "error", title: "Order Creation Failed", text: razorpayData.message });
        return;
    }

    const options = {
        key: razorpayData.key,
        amount: razorpayData.amount,
        currency: razorpayData.currency,
        order_id: razorpayData.razorpayOrderId,
        name: 'Bitwise',
        description: 'Order Payment',
        handler: async function (response) {
            orderData.razorpayOrderId = response.razorpay_order_id;
            orderData.paymentId = response.razorpay_payment_id;
            orderData.razorpaySignature = response.razorpay_signature;

            const placeOrderResponse = await fetch('/checkout/place-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify(orderData),
            });
            const result = await placeOrderResponse.json();

            if (result.success) {
                window.location.href = `/checkout/order-success?orderId=${result.orderId}`;
            } else {
                Swal.fire({ icon: "error", title: "Payment Failed", text: result.message });
                window.location.href = `/checkout/order-failure?orderId=${result.orderId || razorpayData.razorpayOrderId}`;
            }
        },
        prefill: {
            name: '<%= user?.firstName || "User" %> <%= user?.lastName || "" %>',
            email: '<%= user?.email || "" %>',
            contact: '<%= user?.phone || "" %>'
        },
        theme: { color: '#2563eb' }
    };

    const rzp = new Razorpay(options);
    rzp.on('payment.failed', function (response) {
        Swal.fire({ 
            icon: "error", 
            title: "Payment Failed", 
            text: response.error.description || "Payment failed. Please try again." 
        });
        // Redirect with Razorpay order_id since no Order is created yet
        window.location.href = `/checkout/order-failure?orderId=${razorpayData.razorpayOrderId}&amount=${razorpayData.amount / 100}`;
    });
    rzp.open();
}
    </script>
</body>
</html>