<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Addresses</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #3b82f6;
            --background-color: #f8fafc;
            --text-color: #1e293b;
            --success-color: #22c55e;
            --error-color: #ef4444;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }

        body {
            background-color: var(--background-color);
            min-height: 100vh;
            display: grid;
            place-items: center;
            padding: 2rem;
        }

        .container {
            background: white;
            width: 100%;
            max-width: 800px;
            padding: 2rem;
            border-radius: 1.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .header h1 {
            font-size: 1.8rem;
            color: var(--text-color);
        }

        .address-list {
            margin-top: 1rem;
        }

        .address-card {
            background: #f1f5f9;
            padding: 1rem;
            border-radius: 10px;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
        }

        .address-card .details {
            flex: 1;
        }

        .address-card h3 {
            color: var(--text-color);
            font-size: 1.1rem;
            margin-bottom: 0.3rem;
        }

        .address-card p {
            color: #475569;
            font-size: 0.9rem;
        }

        .address-card .actions {
            display: flex;
            gap: 10px;
        }

        /* General Button Styles */
        /* General Button Styles */
button {
    border: none;
    padding: 10px 18px;
    border-radius: 8px; /* More rounded corners for a softer look */
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease; /* Smooth transition */
    display: inline-flex;
    align-items: center;
    gap: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for a modern touch */
}

/* Edit Button */
.edit-btn {
    background: var(--secondary-color);
    color: white;
}

.edit-btn:hover {
    background: #1d4ed8;
    transform: translateY(-2px); /* Slight lift on hover */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

/* Delete Button */
.delete-btn {
    background: var(--error-color);
    color: white;
}

.delete-btn:hover {
    background: #dc2626;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(239, 68, 68, 0.2);
}

/* Set as Primary Button */
.set-primary {
    background: var(--success-color);
    color: white;
}

.set-primary:hover {
    background: #16a34a;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(34, 197, 94, 0.2);
}



        .add-address-btn {
            width: 100%;
            background: var(--primary-color);
            color: white;
            padding: 0.8rem;
            margin-top: 1rem;
            text-align: center;
            display: block;
            border-radius: 8px;
            font-weight: bold;
            transition: background 0.2s;
        }

        .add-address-btn:hover {
            background: var(--secondary-color);
        }

        /* Form Modal */
        .modal {
    display: none;
    position: fixed;
    top: 0; /* Start from the top */
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    overflow-y: auto; /* Enable vertical scrolling */
    display: flex;
    align-items: flex-start; /* Align to top instead of center */
    justify-content: center;
    padding-top: 2em; /* Add padding at the top */
}

.modal-content {
    background: white;
    padding: 2rem;
    border-radius: 10px;
    width: 100%;
    max-width: 500px;
    position: relative;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    overflow-y: auto; /* Enable scrolling within the modal */
    max-height: 90vh; /* Limit modal height to 90% of viewport */
}


        .modal-content h2 {
            margin-bottom: 1rem;
            text-align: center;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.3rem;
        }

        input {
            width: 100%;
            padding: 0.8rem;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .save-btn {
            background: var(--primary-color);
            color: white;
            padding: 0.8rem;
            width: 100%;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.2s;
        }

        .save-btn:hover {
            background: var(--secondary-color);
        }

        .close-btn {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 1.5rem;
            cursor: pointer;
        }
    </style>
    <link rel="icon" type="image/png" href="images/icons/favicon.png" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/bootstrap/css/bootstrap.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/font-awesome-4.7.0/css/font-awesome.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/iconic/css/material-design-iconic-font.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/linearicons-v1.0.0/icon-font.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/animate/animate.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/css-hamburgers/hamburgers.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/animsition/css/animsition.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/select2/select2.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/daterangepicker/daterangepicker.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/slick/slick.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/MagnificPopup/magnific-popup.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/perfect-scrollbar/perfect-scrollbar.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/css/user/util.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/main.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="/css/user/header.css" />
</head>
<body>

    <%- include('./partials/header.ejs') %>

    <div class="container">
        <div class="header">
            <h1>Manage Addresses</h1>
        </div>

        <div class="address-list">
            <% if(userAddresses)userAddresses.forEach(address => { %>
                <div class="address-card">
                    <div class="details">
                        <h3><%= address.firstName %> <%= address.lastName %></h3>
                        <p><%= address.street %>, <%= address.city %>, <%= address.state %> - <%= address.postalCode %></p>
                        <p><strong>Phone:</strong> <%= address.phoneNumber %></p>
                        <% if (address.isDefault) { %>
                            <span class="set-primary">Primary</span>
                        <% } %>
                    </div>
                    <div class="actions">
                        <button class="edit-btn" onclick="editAddress('<%= address._id %>')">Edit</button>
                        <button class="delete-btn" onclick="deleteAddress('<%= address._id %>')">Delete</button>
 
                        <% if (!address.isDefault) { %>
                            <button class="set-primary" onclick="setPrimary('<%= address._id %>')">Set as Primary</button>
                        <% } %>
                    </div>
                </div>
            <% }) %>
        </div>

        <button class="add-address-btn" onclick="openModal()">+ Add New Address</button>
    </div>

    <!-- Address Form Modal -->
    <div class="modal" id="addressModal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal()">&times;</span>
            <h2>Add / Edit Address</h2>
            <form id="addressForm">
                <!-- Hidden Input for Address ID (Used for Editing) -->
                <input type="hidden" id="addressId">
            
                <!-- First Name -->
                <div class="form-group">
                    <label for="firstName">First Name:</label>
                    <input type="text" id="firstName" name="firstName" required>
                </div>
            
                <!-- Last Name -->
                <div class="form-group">
                    <label for="lastName">Last Name:</label>
                    <input type="text" id="lastName" name="lastName">
                </div>
            
                <!-- Phone Number -->
                <div class="form-group">
                    <label for="phoneNumber">Phone Number:</label>
                    <input type="text" id="phoneNumber" name="phoneNumber" required>
                </div>
            
                <!-- Street -->
                <div class="form-group">
                    <label for="street">Street:</label>
                    <input type="text" id="street" name="street" required>
                </div>
            
                <!-- City -->
                <div class="form-group">
                    <label for="city">City:</label>
                    <input type="text" id="city" name="city" required>
                </div>
            
                <!-- State -->
                <div class="form-group">
                    <label for="state">State:</label>
                    <input type="text" id="state" name="state" required>
                </div>
            
                <!-- Postal Code -->
                <div class="form-group">
                    <label for="postalCode">Postal Code:</label>
                    <input type="text" id="postalCode" name="postalCode" required>
                </div>
            
                <!-- Country -->
                <div class="form-group">
                    <label for="country">Country:</label>
                    <input type="text" id="country" name="country" required>
                </div>
            
                <!-- Set as Default Address -->
                <div class="form-group">
                    <label for="isDefault">
                        <input type="checkbox" id="isDefault" name="isDefault">
                        Set as Primary Address
                    </label>
                </div>
            
                <!-- Submit Button -->
                <button type="submit" class="save-btn">Save Address</button>
            </form>
            
        </div>
    </div>

    <script>
        function openModal() { document.getElementById('addressModal').style.display = 'flex'; }
        function closeModal() { document.getElementById('addressModal').style.display = 'none'; }
        async function deleteAddress(addressId) {
    Swal.fire({
        title: "Are you sure?",
        text: "This action will permanently delete the address.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, delete it!"
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                const response = await fetch(`/user/profile/address/delete/${addressId}`, {
                    method: "DELETE",
                    headers: { "Content-Type": "application/json" }
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Deleted!",
                        text: "The address has been deleted successfully.",
                        showConfirmButton: false,
                        timer: 2000
                    }).then(() => {
                        window.location.reload(); // Reload the page to reflect changes
                    });
                } else {
                    throw new Error(result.error || "Failed to delete address.");
                }
            } catch (error) {
                console.error("Error deleting address:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error!",
                    text: "An error occurred while deleting the address. Please try again.",
                });
            }
        }
    });
}

async function setPrimary(addressId) {
    try {
        // console.log('address id is ',addressId)
        const response = await fetch(`/user/profile/address/set-primary/${addressId}`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" }
        });

        const result = await response.json();
        // console.log('the result is ',result)
        if (result.success) {
            Swal.fire({
                icon: "success",
                title: "Updated!",
                text: "This address is now set as your primary address.",
                showConfirmButton: false,
                timer: 2000
            }).then(() => {
                window.location.reload(); 
            });
        } else {
            throw new Error(result.error || "Failed to update address.");
        }
    } catch (error) {
        console.error("Error setting primary address:", error);
        Swal.fire({
            icon: "error",
            title: "Error!",
            text: "An error occurred while updating the primary address. Please try again.",
        });
    }
}


        document.getElementById("addressForm").addEventListener("submit", async function (event) {
    event.preventDefault(); // Prevent default form submission

    const addressId = document.getElementById("addressId").value;
    const firstName = document.getElementById("firstName").value;
    const lastName = document.getElementById("lastName").value;
    const phoneNumber = document.getElementById("phoneNumber").value;
    const street = document.getElementById("street").value;
    const city = document.getElementById("city").value;
    const state = document.getElementById("state").value;
    const postalCode = document.getElementById("postalCode").value;
    const country = document.getElementById("country").value;
    const isDefault = document.getElementById("isDefault").checked;

    // Prepare form data
    const formData = {
        firstName,
        lastName,
        phoneNumber,
        street,
        city,
        state,
        postalCode,
        country,
        isDefault
    };

    const url = addressId ? `/user/profile/address/edit/${addressId}` : "/user/profile/address/add"; // Add or Edit API
    const method = addressId ? "PUT" : "POST";

    try {
        const response = await fetch(url, {
            method: method,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formData),
        });

        console.log('response is ',response)
        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: "success",
                title: "Success!",
                text: addressId ? "Address updated successfully!" : "New address added successfully!",
                showConfirmButton: false,
                timer: 2000
            }).then(() => {
                window.location.reload(); // Refresh page after success
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Error!",
                text: result.error || "Something went wrong! Please try again.",
            });
        }
    } catch (error) {
        console.error("Error saving address:", error);
        Swal.fire({
            icon: "error",
            title: "Error!",
            text: "An error occurred while saving the address. Please try again.",
        });
    }
});

async function editAddress(addressId) {
    try {
        // Fetch the address details
        const response = await fetch(`/user/profile/address/${addressId}`);
        const address = await response.json();

        if (!response.ok) {
            throw new Error(address.error || "Failed to fetch address details");
        }

        // Populate form fields with the retrieved address data
        document.getElementById("addressId").value = address._id;
        document.getElementById("firstName").value = address.firstName;
        document.getElementById("lastName").value = address.lastName || "";
        document.getElementById("phoneNumber").value = address.phoneNumber;
        document.getElementById("street").value = address.street;
        document.getElementById("city").value = address.city;
        document.getElementById("state").value = address.state;
        document.getElementById("postalCode").value = address.postalCode;
        document.getElementById("country").value = address.country;
        document.getElementById("isDefault").checked = address.isDefault;

        // Open the modal
        openModal();
    } catch (error) {
        console.error("Error fetching address details:", error);
        Swal.fire({
            icon: "error",
            title: "Error!",
            text: "Failed to load address details. Please try again.",
        });
    }
}


    </script>


</body>
</html>
