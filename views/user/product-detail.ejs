<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= product.name %> - Product Details</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
   
    <link rel="stylesheet" type="text/css" href="/css/user/header.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/product-detail.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/footer.css">
</head>
<body>
    <%- include('./partials/header') %>

    <div class="containerr">
        <div class="product-grid">
            <div class="image-gallery">
                <div class="main-image-container" id="mainImageContainer">
                    <img src="/uploads/<%= product.images[0] %>" alt="<%= product.name %>" class="main-image" id="mainImage">
                </div>
                <div class="thumbnail-container">
                    <% product.images.slice(0, 3).forEach((image, index) => { %>
                        <img src="/uploads/<%= image %>" alt="Thumbnail <%= index + 1 %>" class="thumbnail <%= index === 0 ? 'active' : '' %>" onclick="changeImage('/uploads/<%= image %>', this)">
                    <% }) %>
                </div>
            </div>

            <div class="product-info">
                <h1 class="product-title"><%= product.name %></h1>
                <p class="product-brand">Brand: <%= product.brand %></p>
                <p class="product-price">
                    ₹<%= product.bestOffer ? (product.price - product.bestOffer.discountAmount).toFixed(2) : product.price.toFixed(2) %>
                    <% if (product.bestOffer) { %>
                        <span class="discount-price">₹<%= product.price.toFixed(2) %></span>
                    <% } %>
                </p>
                <p class="stock-status">
                    <% if (product.stock > 5) { %>
                        <span class="stock-in">In Stock (<%= product.stock %> available)</span>
                    <% } else if (product.stock > 0) { %>
                        <span class="stock-low">Low Stock (<%= product.stock %> left)</span>
                    <% } else { %>
                        <span class="stock-out">Out of Stock</span>
                    <% } %>
                </p>
                <div class="action-buttons">
                    <button class="btn add-to-cart-btn" data-product-id="<%= product._id %>" data-stock="<%= product.stock %>" <%= product.stock === 0 ? 'disabled' : '' %>>Add to Cart</button>
                    <button class="btn add-to-wishlist-btn" onclick="addToWishlist('<%= product._id %>')">Add to Wishlist</button>
                </div>
            </div>
        </div>

        <div class="specifications">
            <h2>Specifications</h2>
            <ul class="spec-list">
                <li><strong>Processor:</strong> <%= product.specifications.processor.brand %> <%= product.specifications.processor.model %></li>
                <li><strong>Cores:</strong> <%= product.specifications.processor.cores %></li>
                <li><strong>Speed:</strong> <%= product.specifications.processor.speed %></li>
                <li><strong>RAM:</strong> <%= product.specifications.ram.size %> <%= product.specifications.ram.type %></li>
                <li><strong>Storage:</strong> <%= product.specifications.storage.capacity %> <%= product.specifications.storage.type %></li>
                <li><strong>Display:</strong> <%= product.specifications.display.size %> <%= product.specifications.display.resolution %></li>
                <li><strong>Graphics:</strong> <%= product.specifications.graphics.brand %> <%= product.specifications.graphics.model %></li>
                <li><strong>Battery:</strong> <%= product.specifications.battery.capacity %> <%= product.specifications.battery.type %></li>
                <li><strong>OS:</strong> <%= product.specifications.os %></li>
                <li><strong>Weight:</strong> <%= product.specifications.weight %></li>
                <li><strong>Dimensions:</strong> <%= product.specifications.dimensions.width %> x <%= product.specifications.dimensions.height %> x <%= product.specifications.dimensions.depth %> mm</li>
                <li><strong>Warranty:</strong> <%= product.warranty %></li>
            </ul>
        </div>

        <div class="reviews">
            <h2>Reviews</h2>
            <% if (product.reviews.length > 0) { %>
                <% product.reviews.forEach(review => { %>
                    <div class="review">
                        <p><strong><%= review.user %>:</strong> <%= review.comment %></p>
                        <p>Rating: <%= review.rating %>/5</p>
                    </div>
                <% }) %>
            <% } else { %>
                <p>No reviews yet.</p>
            <% } %>
        </div>
    </div>

    <%- include('./partials/footer') %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function() {
            // Thumbnail switch
            window.changeImage = function(src, element) {
                const mainImage = document.getElementById('mainImage');
                mainImage.src = src;
                document.querySelectorAll('.thumbnail').forEach(thumb => thumb.classList.remove('active'));
                element.classList.add('active');
            };

            // Zoom effect
            const mainImageContainer = $('#mainImageContainer');
            const mainImage = $('#mainImage');
            let magnifier;

            mainImageContainer.on('mouseenter', function() {
                magnifier = $('<div class="img-magnifier"></div>').appendTo(this);
                magnifier.css({
                    width: '150px',
                    height: '150px',
                    backgroundImage: `url(${mainImage.attr('src')})`,
                    backgroundRepeat: 'no-repeat',
                    backgroundSize: `${mainImage.width() * 2}px ${mainImage.height() * 2}px`
                });
            }).on('mousemove', function(e) {
                const x = e.pageX - mainImageContainer.offset().left;
                const y = e.pageY - mainImageContainer.offset().top;
                const imgWidth = mainImage.width();
                const imgHeight = mainImage.height();

                if (x >= 0 && x <= imgWidth && y >= 0 && y <= imgHeight) {
                    magnifier.css({
                        display: 'block',
                        left: `${x - 75}px`,
                        top: `${y - 75}px`,
                        backgroundPosition: `-${x * 2 - 75}px -${y * 2 - 75}px`
                    });
                } else {
                    magnifier.hide();
                }
            }).on('mouseleave', function() {
                magnifier.remove();
            });
        });

        // Cart/Wishlist functions
        async function updateCounts() {
            try {
                const response = await fetch('/api/user/counts', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                document.getElementById('cartCount').textContent = data.cartCount || 0;
                document.getElementById('wishlistCount').textContent = data.wishlistCount || 0;
            } catch (error) {
                console.error('Error updating counts:', error);
            }
        }

        const user = <%- user ? JSON.stringify(user) : 'null' %>;

        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', async function () {
                if (!user) {
                    Swal.fire({
                        icon: "warning",
                        title: "Login Required",
                        text: "You need to login first to add items to your cart!",
                        showCancelButton: true,
                        confirmButtonText: "Login",
                        confirmButtonColor: "#060318",
                        cancelButtonText: "Cancel",
                        cancelButtonColor: "#e74c3c"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = "/auth/login";
                        }
                    });
                    return;
                }

                const productId = this.getAttribute('data-product-id');
                const stock = parseInt(this.getAttribute('data-stock'), 10);

                if (stock <= 0) {
                    Swal.fire({
                        icon: "warning",
                        title: "Out of Stock",
                        text: "This product is currently unavailable.",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#060318"
                    });
                    return;
                }

                try {
                    const response = await fetch("/cart/add", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ productId, quantity: 1 })
                    });

                    const result = await response.json();

                    if (response.ok && result.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Added to Cart",
                            text: "Product has been added to your cart!",
                            showConfirmButton: false,
                            timer: 2000
                        });
                        await updateCounts();
                    } else {
                        throw new Error(result.error || "Failed to add to cart.");
                    }
                } catch (error) {
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        text: error.message || "Something went wrong.",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#060318"
                    });
                }
            });
        });

        async function addToWishlist(productId) {
            if (!user) {
                Swal.fire({
                    icon: "warning",
                    title: "Login Required",
                    text: "You need to login first to add items to your wishlist!",
                    showCancelButton: true,
                    confirmButtonText: "Login",
                    confirmButtonColor: "#060318",
                    cancelButtonText: "Cancel",
                    cancelButtonColor: "#e74c3c"
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = "/auth/login";
                    }
                });
                return;
            }

            try {
                const response = await fetch("/wishlist/add", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ productId })
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Added to Wishlist",
                        text: "Product has been added to your wishlist!",
                        showConfirmButton: false,
                        timer: 2000
                    });
                    await updateCounts();
                } else {
                    throw new Error(result.error || "Failed to add to wishlist.");
                }
            } catch (error) {
                Swal.fire({
                    icon: "error",
                    title: "Error!",
                    text: error.message || "Something went wrong.",
                    confirmButtonText: "OK",
                    confirmButtonColor: "#060318"
                });
            }
        }
    </script>
</body>
</html>