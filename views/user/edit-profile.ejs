<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Profile</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="/css/user/header.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/edit-profile.css" />
    <link rel="stylesheet" type="text/css" href="/css/user/footer.css" />


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
</head>
<body>

    <%- include('./partials/header.ejs') %>

    <div class="profile-container">
        <div class="profile-header">
            <h1>Edit Profile</h1>
            <p>Update your personal information and security settings</p>
        </div>
    
        <div id="message"></div>
    
        <form id="profileForm" class="form-grid" action="/user/profile/edit" method="post" onsubmit="return validateForm()">
            <!-- Name Field -->
            <div class="form-group">
                <label>Full Name</label>
                <div class="input-wrapper">
                    <input type="text" name="userName" value="<%= user.userName %>" placeholder="Enter your name">
                </div>
            </div>
    
            <!-- Email Field -->
<div class="form-group">
    <label>Email Address</label>
    <div class="input-wrapper">
        <input type="email" name="email" value="<%= user.email %>" placeholder="Enter new email">
        <button style="margin-top: 10px;" class="buttonn" type="button" onclick="sendEmailOTP()">
            <i class="fas fa-paper-plane"></i> Verify Email
        </button>
    </div>
</div>

<!-- OTP Section (Initially Hidden) -->
<div class="otp-section" style="display: none;">
    <div class="form-group">
        <label>Verification Code</label>
        <div class="input-wrapper">
            <input type="text" name="otp" placeholder="Enter 6-digit OTP">
            <small class="otp-timer">OTP sent to your new email (valid for 5:00)</small>
        </div>
    </div>
</div>

<!-- Message Element (if not already present) -->
<div id="message"></div>
    
            <!-- Phone Field -->
            <div class="form-group">
                <label>Phone Number</label>
                <div class="input-wrapper">
                    <input type="tel" name="phone" id="phone" value="<%= user.phone || '' %>" placeholder="Enter phone number" pattern="[0-9]{10}" maxlength="10" oninput="validatePhone()">
                    <span id="phoneFeedback" class="validation-feedback"></span>
                </div>
            </div>
    
            <!-- Password Section -->
            <div class="password-section">
                <h3>Change Password</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <div class="input-wrapper">
                            <input type="password" name="currentPassword" placeholder="Current Password">
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-wrapper">
                            <input type="password" name="newPassword" id="newPassword" placeholder="New Password">
                            <span id="newPasswordFeedback" class="validation-feedback"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-wrapper">
                            <input type="password" name="confirmPassword" id="confirmPassword" placeholder="Confirm Password">
                            <span id="confirmPasswordFeedback" class="validation-feedback"></span>
                        </div>
                    </div>
                </div>
            </div>
            <button class="buttonn" type="submit" class="save-btn">
                <i class="fas fa-save"></i> Save Changes
            </button>
        </form>
    </div>
<%- include('./partials/footer') %>
    
    <script>
        function validatePhone() {
            const phoneInput = document.getElementById('phone');
            const phoneFeedback = document.getElementById('phoneFeedback');
            const phonePattern = /^\d{10}$/;
    
            if (!phonePattern.test(phoneInput.value)) {
                phoneFeedback.textContent = 'Please enter a valid 10-digit phone number';
                phoneInput.setCustomValidity('Invalid phone number');
            } else {
                phoneFeedback.textContent = '';
                phoneInput.setCustomValidity('');
            }
        }
    
        function validateForm() {
            validatePhone();
            return document.getElementById('profileForm').checkValidity();
        }
    </script>
            
            <script>
                async function updateCounts() {
        try {
            const response = await fetch('/api/user/counts', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();
            console.log('cart data is ',data);
            
            document.getElementById('cartCount').textContent = data.cartCount || 0;
            document.getElementById('wishlistCount').textContent = data.wishlistCount || 0;
        } catch (error) {
            console.error('Error updating counts:', error);
        }
                // Live validation for newPassword
                const newPasswordInput = document.getElementById('newPassword');
                const confirmPasswordInput = document.getElementById('confirmPassword');
                const newPasswordFeedback = document.getElementById('newPasswordFeedback');
                const confirmPasswordFeedback = document.getElementById('confirmPasswordFeedback');
            
                // Regular expressions for validation
                const minLengthRegex = /^.{8,}$/; // Minimum 8 characters
                const capitalFirstRegex = /^[A-Z]/; // First letter capital
                const specialCharRegex = /[!@#$%^&*(),.?":{}|<>]/; // At least one special character
                const numberRegex = /[0-9]/; // At least one number
            
                function validatePassword(password) {
                    const errors = [];
            
                    if (!minLengthRegex.test(password)) {
                        errors.push("Password must be at least 8 characters long.");
                    }
                    if (!capitalFirstRegex.test(password)) {
                        errors.push("Password must start with a capital letter.");
                    }
                    if (!specialCharRegex.test(password)) {
                        errors.push("Password must contain at least one special character (!@#$%^&*(),.?\":{}|<>)");
                    }
                    if (!numberRegex.test(password)) {
                        errors.push("Password must contain at least one number.");
                    }
            
                    return errors;
                }
            
                function updatePasswordFeedback() {
                    const newPassword = newPasswordInput.value;
                    const confirmPassword = confirmPasswordInput.value;
                    const passwordErrors = validatePassword(newPassword);
            
                    // Validate newPassword
                    if (newPassword === '') {
                        newPasswordFeedback.textContent = '';
                        newPasswordFeedback.style.color = '';
                    } else if (passwordErrors.length > 0) {
                        newPasswordFeedback.textContent = passwordErrors.join(' ');
                        newPasswordFeedback.style.color = 'red';
                    } else {
                        newPasswordFeedback.textContent = 'Password is valid!';
                        newPasswordFeedback.style.color = 'green';
                    }
            
                    // Validate confirmPassword
                    if (confirmPassword === '') {
                        confirmPasswordFeedback.textContent = '';
                        confirmPasswordFeedback.style.color = '';
                    } else if (confirmPassword !== newPassword) {
                        confirmPasswordFeedback.textContent = 'Passwords do not match!';
                        confirmPasswordFeedback.style.color = 'red';
                    } else {
                        confirmPasswordFeedback.textContent = 'Passwords match!';
                        confirmPasswordFeedback.style.color = 'green';
                    }
                }
            
                // Add event listeners for live validation
                newPasswordInput.addEventListener('input', updatePasswordFeedback);
                confirmPasswordInput.addEventListener('input', updatePasswordFeedback);
            
                // Optional: Initial validation on page load if fields are pre-filled
                updatePasswordFeedback();
            </script>
            
            <style>
                .validation-feedback {
                    display: block;
                    font-size: 0.8em;
                    margin-top: 5px;
                }
                .input-wrapper {
                    position: relative;
                }
                /* Optional: Style the form group */
                .form-group {
                    margin-bottom: 15px;
                }
            </style>
    
            <script>
    let otpTimer;

    async function sendEmailOTP() {
        const emailInput = document.querySelector('input[name="email"]');
        const email = emailInput.value;
        const otpSection = document.querySelector('.otp-section');
        
        if (!email) {
            showMessage('Please enter a valid email address', 'error');
            emailInput.focus();
            return;
        }

        try {
            const response = await fetch('/user/profile/edit/send-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email })
            });

            const result = await response.json();
            
            if (result.success) {
                // Show OTP section when successfully sent
                otpSection.style.display = 'block';
                startOTPTimer();
                showMessage('Verification code sent to your email', 'success');
            } else {
                showMessage(result.error || 'Error sending OTP', 'error');
            }
        } catch (error) {
            showMessage('Network error. Please try again.', 'error');
        }
    }

    function startOTPTimer() {
        let timeLeft = 300;
        const timerElement = document.querySelector('.otp-timer');
        
        otpTimer = setInterval(() => {
            timeLeft--;
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerElement.textContent = `OTP valid for ${minutes}:${seconds.toString().padStart(2, '0')}`;
            
            if (timeLeft <= 0) {
                clearInterval(otpTimer);
                timerElement.textContent = 'OTP expired. Please request a new one.';
                // Optional: Hide OTP section when expired
                // document.querySelector('.otp-section').style.display = 'none';
            }
        }, 1000);
    }

    function showMessage(text, type) {
        const messageEl = document.getElementById('message');
        messageEl.textContent = text;
        messageEl.className = type;
        messageEl.style.display = 'block';

        setTimeout(() => {
            messageEl.style.opacity = '0';
            setTimeout(() => {
                messageEl.style.display = 'none';
                messageEl.style.opacity = '1';
            }, 300);
        }, 5000);
    }

        

document.addEventListener('DOMContentLoaded', function() {
    const profileForm = document.getElementById('profileForm');
    
    profileForm.addEventListener('submit', async function(e) {
        e.preventDefault(); // Prevent default form submission
        
        // Create FormData object from the form
        const formData = new FormData(profileForm);
        const formObject = Object.fromEntries(formData);
        try {
            console.log('Sending data:', formObject);//debug

            const response = await fetch('/user/profile/edit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formObject)
            });
            
            const result = await response.json();

            // Check if response is OK
            if (!response.ok) {
                throw new Error(result.error);
            }
            
            console.log('response is ',result)
            
            // Show success alert
            Swal.fire({
                title: 'Success!',
                text: 'Profile updated successfully',
                icon: 'success',
                confirmButtonText: 'Great!',
                confirmButtonColor: '#3085d6',
                timer: 2000,
                
            }).then(() => {
                // Optional: Redirect or refresh page
                window.location.reload();
            });
            
        } catch (error) {
            // Show error alert
            Swal.fire({
                title: 'Error!',
                text: 'Failed to update profile: ' + error.message,
                icon: 'error',
                confirmButtonText: 'Try Again',
                confirmButtonColor: '#d33'
            });
        }
    });
    
    // Optional: Add input validation before submission
    function validateForm() {
        const newPassword = document.querySelector('[name="newPassword"]').value;
        const confirmPassword = document.querySelector('[name="confirmPassword"]').value;
        
        if (newPassword && newPassword !== confirmPassword) {
            Swal.fire({
                title: 'Warning!',
                text: 'Passwords do not match',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            return false;
        }
        return true;
    }

});
    </script>
</body>
</html>